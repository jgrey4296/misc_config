;;; lang/web/config.el -*- lexical-binding: t; -*-

(load! "+vars")
(after! (evil jg-bindings-total)
  (load! "+bindings")
  )

(use-package! web-mode
  :mode "\\.[px]?html?\\'"
  :mode "\\.erb\\'"
  :mode "\\.[lh]?eex\\'"
  :mode "\\.jsp\\'"
  :mode "\\.as[cp]x\\'"
  :mode "\\.ejs\\'"
  :mode "\\.hbs\\'"
  :mode "\\.mustache\\'"
  :mode "\\.svelte\\'"
  :mode "\\.twig\\'"
  :mode "\\.jinja2?\\'"
  :mode "\\.eco\\'"
  :mode "wp-content/themes/.+/.+\\.php\\'"
  :mode "templates/.+\\.php\\'"
  :init
  ;; If the user has installed `vue-mode' then, by appending this to
  ;; `auto-mode-alist' rather than prepending it, its autoload will have
  ;; priority over this one.
  (add-to-list 'auto-mode-alist '("\\.vue\\'" . web-mode) 'append)
  :mode "\\.vue\\'"
  :config
  (set-docsets! 'web-mode "HTML" "CSS" "Twig" "WordPress")

  ;; tidy is already defined by the format-all package. We redefine it to add
  ;; more sensible arguments to the tidy command.
  (set-formatter! 'html-tidy
    '("tidy" "-q" "-indent"
      "--tidy-mark" "no"
      "--drop-empty-elements" "no"
      ("--show-body-only" "%s" (if +format-region-p "true" "auto"))
      ("--indent-spaces" "%d" tab-width)
      ("--indent-with-tabs" "%s" (if indent-tabs-mode "yes" "no"))
      ("-xml" (memq major-mode '(nxml-mode xml-mode))))
    :ok-statuses '(0 1))

  (setq web-mode-enable-html-entities-fontification t
        web-mode-auto-close-style 1)

  (after! smartparens
    (defun +web-is-auto-close-style-3 (_id action _context)
      (and (eq action 'insert)
           (eq web-mode-auto-close-style 3)))
    (sp-local-pair 'web-mode "<" ">" :unless '(:add +web-is-auto-close-style-3))

    ;; let smartparens handle these
    (setq web-mode-enable-auto-quoting nil
          web-mode-enable-auto-pairing t)

    ;; 1. Remove web-mode auto pairs whose end pair starts with a latter
    ;;    (truncated autopairs like <?p and hp ?>). Smartparens handles these
    ;;    better.
    ;; 2. Strips out extra closing pairs to prevent redundant characters
    ;;    inserted by smartparens.
    (dolist (alist web-mode-engines-auto-pairs)
      (setcdr alist
              (cl-loop for pair in (cdr alist)
                       unless (string-match-p "^[a-z-]" (cdr pair))
                       collect (cons (car pair)
                                     (string-trim-right (cdr pair)
                                                        "\\(?:>\\|]\\|}\\)+\\'")))))
    (delq! nil web-mode-engines-auto-pairs))

  (add-to-list 'web-mode-engines-alist '("elixir" . "\\.eex\\'"))
  (add-to-list 'web-mode-engines-alist '("phoenix" . "\\.[lh]eex\\'"))

  ;; Use // instead of /* as the default comment delimited in JS
  (setf (alist-get "javascript" web-mode-comment-formats nil nil #'equal) "//")

  (add-hook! 'web-mode-hook
    (defun +web--fix-js-comments-h ()
      "Fix comment handling in `web-mode' for JavaScript."
      (when (member web-mode-content-type '("javascript" "jsx"))
        ;; For some reason the default is to insert HTML comments even
        ;; in JavaScript.
        (setq-local comment-start "//")
        (setq-local comment-end "")
        ;; Needed since otherwise the default value generated by
        ;; `comment-normalize-vars' will key off the syntax and think
        ;; that a single "/" starts a comment, which completely borks
        ;; auto-fill.
        (setq-local comment-start-skip "// *"))))

)

(use-package! emmet-mode
  :preface (defvar emmet-mode-keymap (make-sparse-keymap))
  :hook (css-mode web-mode html-mode haml-mode nxml-mode rjsx-mode reason-mode)
  :config
  (when (require 'yasnippet nil t)
    (add-hook 'emmet-mode-hook #'yas-minor-mode-on))
  (setq emmet-move-cursor-between-quotes t)
  (setq-hook! 'rjsx-mode-hook emmet-expand-jsx-className? t)
  (map! :map emmet-mode-keymap
        :v [tab] #'emmet-wrap-with-markup
        [tab] #'+web/indent-or-yas-or-emmet-expand
        "M-E" #'emmet-expand-line)
  )

(use-package! css-mode
  :config
  (add-hook! 'css-mode-hook #'hs-minor-mode)
  (setq-hook! 'css-mode-hook
    ;; Correctly continue /* and // comments on newline-and-indent
    comment-line-break-function #'+css/comment-indent-new-line
    ;; Fix `fill-paragraph' not conjoining line comments in CSS modes correctly.
    adaptive-fill-function #'+css-adaptive-fill-fn
    ;; Fix filled lines not being auto-prefixed with a * when needed.
    adaptive-fill-first-line-regexp "\\'[ \t]*\\(?:\\* *\\)?\\'"
    )

  (add-hook! '(css-mode-hook sass-mode-hook stylus-mode-hook)
             #'rainbow-mode)
  )

(use-package! counsel-css
  :after css-mode
  :when (modulep! :completion ivy)
  :hook (css-mode . counsel-css-imenu-setup)
  )

(use-package! helm-css-scss
  :when (modulep! :completion helm)
  :defer t
  )

(def-project-mode! +web-pelican-mode
  :modes '(web-mode python-mode css-mode markdown-mode)
  :files ("pelican.toml")
  :on-enter
  (when (derived-mode-p 'web-mode)
    ;; use web-mode-engines
    (web-mode-set-engine "django"))
  )

(use-package! sass-mode
  :config
  (set-company-backend! 'sass-mode 'company-css)
  )

(when (modulep! +lsp)
  (add-hook! '(css-mode-local-vars-hook
               scss-mode-local-vars-hook
               sass-mode-local-vars-hook
               less-css-mode-local-vars-hook
               web-mode-local-vars-hook
               )
             :append #'lsp!))

(when (modulep! +tree-sitter) (add-hook! 'css-mode-local-vars-hook :append #'tree-sitter!))


(after! pug-mode
  (set-company-backend! 'pug-mode 'company-web-jade))
(after! web-mode
  (set-company-backend! 'web-mode 'company-css 'company-web-html))
(after! slim-mode
  (set-company-backend! 'slim-mode 'company-web-slim))
