#+TITLE: Elisp Demos

* %

#+BEGIN_SRC elisp
;; JG Example
(% 10 4)
#+END_SRC

#+RESULTS:
: 2

* cl-loop

#+begin_src lisp :results output
(cl-loop for x in '(a b nil d nil e)
         for valid = (not (null x))
         when valid do
         (message "%s" x)
         when valid collect x
         )
#+end_src

* backquote-list*-macro
#+begin_src lisp
(backquote-list* 'a 'b 'c) => (a b . c)
#+end_src


* -reject
#+begin_src lisp
(-reject #'null '(1 2 3 nil 4 nil 5 6))
#+end_src


* f-parent
#+begin_src lisp :
(f-parent "a/b/c/d.blah")
#+end_src

* concatenate
#+begin_src lisp
(concatenate 'list '(1 2 3 4) [5 6 7] (list 8 9 10))
#+end_src


* s-suffix?
#+begin_src emacs-lisp
(s-suffix? "-hook" "a-test-hook")
#+end_src
