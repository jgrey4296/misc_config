;;; lang/jg-python/+funcs.el -*- lexical-binding: t; -*-
(defun +jg-python-close-all-defs ()
    (interactive)
    (save-excursion
      (goto-char (point-min))
      (while (python-nav-forward-defun)
        (outline-hide-subtree)
        )
      )
    )
(defun +jg-python-close-class-defs ()
    (interactive)
    (save-excursion
      (end-of-line)
      (unless (not (re-search-backward "^class " nil t))
        (if (not current-prefix-arg)
            (progn
              (outline-hide-subtree)
              (outline-toggle-children))
          (outline-show-subtree)
          (forward-line)
          (while (and (python-nav-forward-defun)
                      (progn (beginning-of-line)
                             (not (looking-at-p "^class"))))
            (outline-toggle-children)
            (forward-line)
            )
          )
        )
      )
    )
(defun +jg-python-toggle-breakpoint ()
    "Modified version of spacemacs original
Add a break point, highlight it.
Customize python using PYTHONBREAKPOINT env variable
"
    (interactive)
    (let ((trace "breakpoint()")
          (line (thing-at-point 'line)))
      (if (and line (string-match trace line))
          (kill-whole-line)
        (progn
          (evil-end-of-line)
          (insert "\n")
          (insert trace)
          (python-indent-line)))))

(defun +jg-python-insert-import (&optional arg)
  " insert the literal string provided/read from minibuffer, at the imports section
of a python file "
  (interactive)
  (let ((arg (if (not arg) (read-string "Import Statement: " "import ") arg)))
    (pyimport--insert-import arg))
  )

(defun +jg-python-import-snippet (&optional arg)
  " Expand a yasnippet template, then insert it at the imports section "
  (interactive)
  (setq yas--condition-cache-timestamp (current-time))
  (let* ((template-alist (mapcar (lambda (x) `(,(yas--template-uuid x) . ,x)) (yas--all-templates (yas--get-snippet-tables))))
         (template-name (ivy-completing-read "Import Snippet: " template-alist nil nil "import " ))
         (yas--current-template (alist-get template-name template-alist nil nil 'equal))
         final)
    (if yas--current-template
        (progn (with-temp-buffer
                 (yas-minor-mode)
                 (yas-expand-snippet yas--current-template (point-min))
                 (setq final (buffer-string))
                 )
               (pyimport--insert-import final)
               )
      )
    )
  )
(defun +jg-python-select-defun ()
  (interactive)
  (let ((start (progn (python-nav-beginning-of-defun)
                      (point)))
        (end (progn (python-nav-end-of-defun)
                    (point))))
    (evil-visual-make-region start end))
  )
(defun +jg-python-select-class ()
  (interactive)
  (let ((start (re-search-backward "^class")))
    (python-nav-end-of-defun)
    (evil-visual-make-region start (point))
    )
  )

(defun +jg-python-class-diagram ()
  " On lines of class definitions 'class A(B..):
    extract the total hierarchy "
  (interactive)
  (goto-char (point-min))
  (let (graph sorted-graph
        (regex "^class \\(.+?\\)\\((\\(.*?\\))\\)?:$")
        )
    (while (and (< (point) (point-max)) (looking-at regex))
      (let* ((classname (match-string 1))
             (parents   (s-split "," (if (match-string 3)
                                         (match-string 3)
                                       "") t))
             (cleaned-parents (mapcar #'(lambda (x) (s-trim (if (s-contains? "." x)
                                                           (cadr (s-split "\\." x t))
                                                         x))) parents)))

        (setq graph (concatenate 'list graph (if (null cleaned-parents)
                                                 `(("object" . ,classname))
                                               (-zip-fill classname cleaned-parents nil))))
        )
      (forward-line)
      )
    (setq sorted-graph (-sort #'(lambda (x y) (string-lessp (car x) (car y))) graph))
    ;; Generate Graphviz description
    (with-temp-buffer-window "*Python Class Diagram*"
        'display-buffer-pop-up-window nil
      (princ "#+begin_src dot :file ~/desktop/class-diagram.png :exports results :results silent\n")
      (princ "graph {\n")
      ;; Add individual elements
      (mapc #'(lambda (x) (princ (format "  \"%s\" -- \"%s\";\n" (car x) (cdr x)))) sorted-graph)
      (princ "}\n")
      (princ "#+end_src\n")
      (princ "[[file:~/desktop/class-diagram.png][Results]]\n")
      )
    )
  )

(defun +jg-python-support ()
  " Toggle dev support from conda, lsp, or nothing "
  (interactive)
  (let ((selection (ivy-read "Python Support Options: " '(lsp conda flycheck pyright pylint nothing)))
        (stop-lsp (lambda ()
                    (remove-hook 'python-mode-local-vars-hook 'lsp!)
                    ;; disconnect each python buffer from the server
                    (if (fboundp 'lsp-disconnect)
                        (mapc (lambda (x) (with-current-buffer x (if (eq major-mode 'python-mode) (lsp-disconnect)))) (buffer-list))
                    )))
        (stop-anaconda (lambda ()
                         (if (fboundp 'anaconda-mode-stop) (anaconda-mode-stop))
                         (if (fboundp 'anaconda-eldoc-mode) (anaconda-eldoc-mode -1))
                         (remove-hook 'python-mode-local-vars-hook 'anaconda-mode)
                         (remove-hook 'python-mode-local-vars-hook 'anaconda-eldoc-mode)
                         (remove-hook 'python-mode-hook '+jg-python-auto-kill-conda-hook)
                         ))
        (stop-flycheck (lambda ()
                         (global-flycheck-mode -1)
                         (flycheck-global-teardown)
                         ))
        )
    (setq jg-python-last-chosen-support selection)
    (cond ((s-equals? selection 'lsp)
           (message "got lsp")
           (apply stop-anaconda nil)
           (add-hook 'python-mode-local-vars-hook 'lsp!)
           (with-current-buffer (current-buffer)
             (if (eq major-mode 'python-mode) (lsp!)))
           )
          ((s-equals? selection 'conda)
           (message "got conda")
           (apply stop-lsp nil)
           (add-hook 'python-mode-hook '+jg-python-auto-kill-conda-hook)
           (add-hook 'python-mode-local-vars-hook 'anaconda-mode)
           (add-hook 'python-mode-local-vars-hook 'anaconda-eldoc-mode)
           (with-current-buffer (current-buffer)
             (if (eq major-mode 'python-mode) (anaconda-mode)))
           )
          ((s-equals? selection 'flycheck)
           (message "got flycheck")
           (apply stop-anaconda nil)
           (apply stop-lsp nil)
           (global-flycheck-mode)
           )
          ((s-equals? selection 'pyright)
           (delete 'python-pyright flycheck-disabled-checkers)
           (apply stop-lsp nil)
           (apply stop-anaconda nil)
           )
          ((s-equals? selection 'pylint)
           (delete 'python-pylint flycheck-disabled-checkers)
           (apply stop-lsp nil)
           (apply stop-anaconda nil)
           )
          ((s-equals? selection 'nothing)
           (message "got nothing")
           (apply stop-lsp nil)
           (apply stop-anaconda nil)
           )
          (t
           (message "Unrecognized option: %s" selection)
           )
          )
    )
  )
