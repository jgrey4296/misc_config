* Emacs Reminders and notes
  To force recompilation:
  C-u 0 M-x byte-recompile-directory

** Icy
   [[https://emacs.stackexchange.com/questions/30317/][Font decrease error fix]]

** Spacemacs fringe fix:
   #+begin_src lisp results output/value
   ;; in layers/+distributions/spacemacs-base/keybindings.el
   (spacemacs|add-toggle fringe
   :status (not (equal (if (fboundp 'fringe-mode) finge-mode 0) 0))
   #+end_src

** Doom comments
#+NAME: Comments
#+begin_src emacs-lisp :results value
;; Place your private configuration here! Remember, you do not need to run 'doom
;; sync' after modifying this file!
;;
;; Here are some additional functions/macros that could help you configure Doom:
;;
;; - `load!' for loading external *.el files relative to this one
;; - `use-package!' for configuring packages
;; - `after!' for running code after a package has loaded
;; - `add-load-path!' for adding directories to the `load-path', relative to
;;   this file. Emacs searches the `load-path' when you load packages with
;;   `require' or `use-package'.
;; - `map!' for binding new keys
;;
;; To get information about any of these functions/macros, move the cursor over
;; the highlighted symbol at press 'K' (non-evil users must press 'C-c c k').
;; This will open documentation for it, including demos of how they are used.
;;
;; You can also try 'gd' (or 'C-c c d') to jump to their definition and see how
;; they are implemented.

#+end_src

#+NAME: Packages comments
#+begin_src emacs-lisp  :results value
;; To install a package with Doom you must declare them here and run 'doom sync'
;; on the command line, then restart Emacs for the changes to take effect -- or
;; use 'M-x doom/reload'.
;; (package! jg-python-origami
;;   :type 'local
;;   :recipe '(:local-repo "packages/jg-python-origami"))

;; To install SOME-PACKAGE from MELPA, ELPA or emacsmirror:
;(package! some-package)

;; To install a package directly from a remote git repo, you must specify a
;; `:recipe'. You'll find documentation on what `:recipe' accepts here:
;; https://github.com/raxod502/straight.el#the-recipe-format
;(package! another-package
;  :recipe (:host github :repo "username/repo"))

;; If the package you are trying to install does not contain a PACKAGENAME.el
;; file, or is located in a subdirectory of the repo, you'll need to specify
;; `:files' in the `:recipe':
;(package! this-package
;  :recipe (:host github :repo "username/repo"
;           :files ("some-file.el" "src/lisp/*.el")))

;; If you'd like to disable a package included with Doom, you can do so here
;; with the `:disable' property:
;(package! builtin-package :disable t)

;; You can override the recipe of a built in package without having to specify
;; all the properties for `:recipe'. These will inherit the rest of its recipe
;; from Doom or MELPA/ELPA/Emacsmirror:
;(package! builtin-package :recipe (:nonrecursive t))
;(package! builtin-package-2 :recipe (:repo "myfork/package"))

;; Specify a `:branch' to install a package from a particular branch or tag.
;; This is required for some packages whose default branch isn't 'master' (which
;; our package manager can't deal with; see raxod502/straight.el#279)
;(package! builtin-package :recipe (:branch "develop"))

;; Use `:pin' to specify a particular commit to install.
;(package! builtin-package :pin "1a2b3c4d5e")

;; Doom's packages are pinned to a specific commit and updated from release to
;; release. The `unpin!' macro allows you to unpin single packages...
;(unpin! pinned-package)
;; ...or multiple packages
;(unpin! pinned-package another-pinned-package)
;; ...Or *all* packages (NOT RECOMMENDED; will likely break things)
;(unpin! t)

#+end_src
** Keymap Hierarchy:
NOTE: See evil-core.el for full design of evil keybindings
*** Overriding keymaps/overlay keymaps
*** Emulation mode keymaps
**** Evil keymaps
**** Intercept keymaps
**** Local state keymap
**** Minor-mode keymaps
**** Auxiliary keymaps
**** Overriding keymaps
**** Global state keymap
**** Keymaps for other states
*** Minor mode keymaps
*** Local keymap (`local-set-key')
*** Global keymap (`global-set-key')
