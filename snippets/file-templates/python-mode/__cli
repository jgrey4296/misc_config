#/usr/bin/env python3
"""
$0
"""
##-- imports
from __future__ import annotations

import abc
import argparse
import configparser
import logging as logmod
from copy import deepcopy
from dataclasses import InitVar, dataclass, field
import pathlib
from re import Pattern
from sys import stderr, stdout
from typing import (TYPE_CHECKING, Any, Callable, ClassVar, Final, Generic,
                    Iterable, Iterator, Mapping, Match, MutableMapping,
                    Protocol, Sequence, Tuple, TypeAlias, TypeGuard, TypeVar,
                    cast, final, overload, runtime_checkable)
from uuid import UUID, uuid1
from weakref import ref
##-- end imports

##-- Logging
DISPLAY_LEVEL = logmod.DEBUG
LOG_FILE_NAME = "log.{}".format(pathlib.Path(__file__).stem)
LOG_FORMAT    = "%(asctime)s | %(levelname)8s | %(message)s"
FILE_MODE     = "w"
STREAM_TARGET = stderr # or stdout

logging         = logmod.root
logging.setLevel(logmod.NOTSET)
console_handler = logmod.StreamHandler(STREAM_TARGET)
file_handler    = logmod.FileHandler(LOG_FILE_NAME, mode=FILE_MODE)

console_handler.setLevel(DISPLAY_LEVEL)
# console_handler.setFormatter(logmod.Formatter(LOG_FORMAT))
file_handler.setLevel(logmod.DEBUG)
# file_handler.setFormatter(logmod.Formatter(LOG_FORMAT))

logging.addHandler(console_handler)
logging.addHandler(file_handler)
##-- end Logging

##-- argparse
#see https://docs.python.org/3/howto/argparse.html
parser = argparse.ArgumentParser(formatter_class=argparse.RawDescriptionHelpFormatter,
                                 epilog = "\n".join([""]))
argparser.add_argument("-v", "--verbose", action='count', help="increase verbosity of logging (repeatable)")
parser.add_argument('--aBool', action="store_true")

#args.aBool...

##-- End argparse

def main():
    args = parser.parse_args()
    verbosity = max(logmod.DEBUG, logmod.WARNING - (10 * (args.verbose or 0)))
    console_handler.setLevel(verbosity)

if __name__ == '__main__':
    main()
