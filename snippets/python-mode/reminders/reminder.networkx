# -*- mode: snippet -*-
# name: reminder.networkx
# uuid: reminder.networkx
# group: data structures
# --
import networkx as nx

G = nx.Graph() #.DiGraph() .MultiGraph() .MultiDiGraph()
G.add_node("A")
G.add_nodes_from("BCDE")
G.add_star("GHJKL")
G.add_cycle("QWERT")

#Add edge attributes:
G[1][3]['color'] = "blue"

#add_edge, add_edges_from,
#has_edge, has_node,
#.nodes(), .edges(), .neighbours()
#nx.connected_components(G)
#nx.degree(G)
#nx.clustering(G)

#remove_node, remove_nodes_from, remove_edge, remove_edges_from

#operations:
# subgraph(G, nbunch)      - induced subgraph view of G on nodes in nbunch
# union(G1,G2)             - graph union
# disjoint_union(G1,G2)    - graph union assuming all nodes are different
# cartesian_product(G1,G2) - return Cartesian product graph
# compose(G1,G2)           - combine graphs identifying nodes common to both
# complement(G)            - graph complement
# create_empty_copy(G)     - return an empty copy of the same graph class
# convert_to_undirected(G) - return an undirected representation of G
# convert_to_directed(G)   - return a directed representation of G
# connected_components(G)  - return the connected components of the graph G

#Generators:
petersen = nx.petersen_graph()
tutte = nx.tutte_graph()
maze = nx.sedgewick_maze_graph()
tet = nx.tetrahedral_graph()
K_5 = nx.complete_graph(5)
K_3_5 = nx.complete_bipartite_graph(3, 5)
barbell = nx.barbell_graph(10, 10)
lollipop = nx.lollipop_graph(10, 20)
er = nx.erdos_renyi_graph(100, 0.15)
ws = nx.watts_strogatz_graph(30, 3, 0.1)
ba = nx.barabasi_albert_graph(100, 5)
red = nx.random_lobster(100, 0.9, 0.9)

#reading and writing:
# nx.write_gml(red, "path.to.file")
# mygraph = nx.read_gml("path.to.file")

#drawing
import pygraphviz as pgv
A = nx.drawing.nx_agraph.to_agraph(G)
A.layout(prog='dot')
A.draw('test.png')