# -*- mode: snippet -*-
# name: tracemalloc
# uuid: tracemalloc
# key:  tracemalloc
# group :
# --
import tracemalloc
import linecache

human = lambda num, sign=False: tracemalloc._format_size(num, sign)

def print_stat(stat):
    """ Print a Traced memory snapshot """
    assert(isinstance(stat, (tracemalloc.Statistic, tracemalloc.StatisticDifference)))
    tb = stat.traceback
    print(f"Frame/Count/Size: {len(stat.traceback):}, {stat.count:}, {human(stat.size)}")
    for x in range(len(tb)):
        frame = tb[x]
        print(f"File   : {split(frame.filename)[1]:<15}", f"{frame.lineno:<7}: {linecache.getline(frame.filename, frame.lineno).strip()}")
    print()

def print_diff(stat):
    """ Print a Trace memory comparison """
    assert(isinstance(stat, tracemalloc.StatisticDiff))
    print(f"Difference: {human(stat.size_diff, True)}, {stat.count_diff}")
    print_stat(stat)


# Usage:
NUM_FRAMES = 5
tracemalloc.start(NUM_FRAMES)

# Do Stuff.
st1 = tracemalloc.take_snapshot()
tracemalloc.clear_traces()

# Do Stuff.
st2 = tracemalloc.take_snapshot()


traced = tracemalloc.get_traced_memory()
print("Traced Memory: Current: {:<5}, Peak: {:<5}".format( human(traced[0]), human(traced[1])))
print("Traceback Limit: ", tracemalloc.get_traceback_limit())
print("Sub_val allocated at: ", tracemalloc.get_object_traceback(sub_val))

print("\nBy Traceback --------------------")
for stat in st1.statistics('traceback'):
    print_stat(stat)

print("\n ST2")
for stat in st2.statistics('traceback'):
    print_stat(stat)

print("\nComparison")
for stat in st2.compare_to(st1, 'traceback'):
    print_diff(stat)