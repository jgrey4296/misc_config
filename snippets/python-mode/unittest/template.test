# -*- mode: snippet -*-
# name: template.test
# uuid: template.test
# group: testing
# --
#https://docs.python.org/3/library/unittest.html
# https://docs.python.org/3/library/unittest.mock.html
"""
$0
"""
##-- imports
from __future__ import annotations
import warnings

import pathlib
from typing import (TYPE_CHECKING, Any, Callable, ClassVar, Final, Generic,
                    Iterable, Iterator, Mapping, Match, MutableMapping,
                    Protocol, Sequence, Tuple, TypeAlias, TypeGuard, TypeVar,
                    cast, final, overload, runtime_checkable)
import unittest
import unittest.mock as mock
import logging as logmod
##-- end imports



with warnings.catch_warnings():
    warnings.simplefilter("ignore")
    pass

class $2(unittest.TestCase):

    @classmethod
    def setUpClass(cls):
        LOGLEVEL      = logmod.DEBUG
        LOG_FILE_NAME = "log.{}".format(pathlib.Path(__file__).stem)
        cls.file_h        = logmod.FileHandler(LOG_FILE_NAME, mode="w")

        cls.file_h.setLevel(LOGLEVEL)
        logging = logmod.root
        logging.setLevel(logmod.NOTSET)
        logging.handlers[0].setLevel(logmod.WARNING)
        logging.addHandler(cls.file_h)


    def setUp(self):
        return 1

    def tearDown(self):
        return 1

    #----------
    # use testcase snippet
    # mock.Mock / MagicMock
    # create_autospec
    # @patch(' ') / with patch.object(...)

    $3

if __name__ == '__main__':
    unittest.main()
