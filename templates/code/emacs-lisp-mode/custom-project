# -*- mode: snippet -*-
# name  : custom-project
# uuid  : custom-project
# key   : custom-project
# group : projectile
# --
(after! projectile
  (defun +jg-$1-related-files-fn (path)
  " Given a relative path to a file, provide projectile with various :kinds of related file "
    (let ((impl-file  (f-join (f-parent (f-parent path)) (s-replace "test_" "" (f-filename path))))
          (test-file  (f-join (f-parent path) "__tests" (concat "test_" (f-filename path))))
          ;;(init-file  (f-join (f-parent path) "__init__.py"))
          (log-file   (f-join (projectile-project-root) (concat "log." (f-base path))))
          ;;(error-file (f-join (car (f-split path)) "errors" (concat (f-base path) "_errors.py")))
          (project    (f-join (projectile-project-root) "$3"))
          (is-test (s-matches? "^test_" (f-filename path)))
          )
      (append (when is-test (list :impl impl-file))
              (unless is-test (list :test test-file))
              (when (s-matches? "\/cli\/" path) (list :project project))
              (list :init-py init-file)
              (list :log log-file)
              (list :errors error-file)
              )
      )
    )

  (projectile-register-project-type 'jg-${1:mode}-project '("${2:files}")
                                    :project-file "${3:project-file}"
                                    :configure   nil
                                    :test        nil
                                    :test-dir    nil
                                    :test-prefix nil
                                    :related-files-fn #'+jg-$1-related-files-fn
                                    )
  )
