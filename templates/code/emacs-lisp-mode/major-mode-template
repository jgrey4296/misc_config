# -*- mode: snippet -*-
# name: major-mode-template
# --

;;-- keymap
(defvar-local $1-mode-map
  (make-sparse-keymap))

;;-- end keymap

;;-- font lock
;; List of '(regex (groupnum "face")+)
(defconst $1-font-lock-keywords
  (rx-let ((w (x) (: x (0+ blank)))
           (ln (: punctuation line-end))
           (basic-syms (| "@" "+" "!" "<-" "?" "-" "&"))
           (basic-kws  (| "def" "return"))
           )
    (list
     ;;`(,(rx ) (subexp facename override laxmatch))
     )
    )
  "Highlighting for $1-mode"
)

;;-- end font lock

;;-- syntax-table
(defvar $1-mode-syntax-table
  (let ((st (make-syntax-table)))
    (modify-syntax-entry ?. "." st)
    (modify-syntax-entry ?! "." st)
    (modify-syntax-entry ?$ "_" st)
    ;;underscores are valid parts of words:
    (modify-syntax-entry ?_ "w" st)
    (modify-syntax-entry ?/ "<12" st)
    (modify-syntax-entry ?\n ">" st)
    (modify-syntax-entry ?\" "\"\"" st)
    (modify-syntax-entry ?\( "()" st)
    (modify-syntax-entry ?\[ "(]" st)
    (modify-syntax-entry ?: ".:2" st)
    st)
  "Syntax table for the $1-mode")


;;-- end syntax-table


(define-derived-mode $1-mode fundamental-mode
  "$1"
  "$2"
  (interactive)
  (kill-all-local-variables)
  (use-local-map $1-mode-map)

  ;; font-lock-defaults: (keywords disable-syntactic case-fold syntax-alist)
  ;; (set (make-local-variable 'font-lock-defaults) (list $1-font-lock-keywords nil))
  ;; (set (make-local-variable 'font-lock-syntactic-face-function) '$1-syntactic-face-function)
  ;; (set (make-local-variable 'indent-line-function) '$1-indent-line)
  ;; (set (make-local-variable 'comment-style) '(plain))
  ;; (set (make-local-variable 'comment-start) "//")
  ;; (set (make-local-variable 'comment-use-syntax) t)
  ;; (set-syntax-table $1-mode-syntax-table)
  ;;
  (setq major-mode '$1-mode)
  (setq mode-name "$1")
  (run-mode-hooks)
  (outline-minor-mode)
  (yas-minor-mode)

  )
(add-to-list 'auto-mode-alist '("\\\\.$1" . $1-mode))

(provide '$1-mode)
