# -*- mode: snippet -*-
# name  : register-lsp
# uuid  : register-lsp
# key   : register-lsp
# group :
# --
(lsp-register-client ;; $1
   (make-lsp-client
    :server-id    '$1
    :major-modes '($3-mode)
    ;; :activation-fn (lsp-activate-on "$3") ;; fn(file-name, major-mode) -> bool
    :priority       0
    :multi-root    nil
    :add-on?       nil
    :new-connection (lsp-stdio-connection (lambda ()
                                            (cons (lsp-package-path '$2) ("args")))
    :initialized-fn (lambda (workspace)
                      (with-lsp-workspace workspace (lsp--set-configuration (make-hash-table :test 'equal))))
    :download-server-fn (lambda (_client callback error-callback _update?)
                          (lsp-package-ensure '$2 callback error-callback))
    :notification-handlers (lsp-ht ("$1/beginProgress"  'lsp-$1--begin-progress-callback)
                                   ("$1/reportProgress" 'lsp-$1--report-progress-callback)
                                   ("$1/endProgress"    'lsp-$1--end-progress-callback)
                                   )
    ;; :request-handlers  hash-table
    ;; :response-handlers hash-table
    ;; :uri-handlers      hash-table
    ;; :action-handlers   hash-table
    :library-folders-fn (lambda (_workspace) (list "dirs" ))

    ;; :initialization-options fn
    )
   )
