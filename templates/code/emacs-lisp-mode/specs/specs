# -*- mode: snippet -*-
# name  : browse-spec
# uuid  : browse-spec
# key   : browse-spec
# group :
# --
(spec-handling-add! lookup-url nil
                    ('$1
                     ("${1:name}" "${2:url}")
                     $0
                     )
                    )
(spec-handling-add! file-templates nil
                    ('${1:mode}
                     ("$1.$2$"           :trigger "__" :mode $1-mode)
                     )
                    )
(spec-handling-add! fold nil
                    ('$1
                     :modes ($1-mode)
                     :triggers (:open-all   hs-show-all
                                :close-all  hs-hide-all
                                :toggle     hs-toggle-hiding
                                :open       hs-show-block
                                :open-rec   nil
                                :close      hs-hide-block
                                )
                     )
                    )
(spec-handling-add! hideshow nil
                    ('$1
                     ;;MODE START END COMMENT-START FORWARD-SEXP-FUNC ADJUST-BEG-FUNC
                     ($1-mode " " " ")
                     )
                    )

;; Filter funcs in ibuffer-filtering-alist
(+jg-ibuffer-define-filters '$1 "$2" '())
(+jg-ibuffer-define-groups  '$1 "$3" '())
(+jg-browse-add-lookup-spec '$1
                            '("${1:name}" "${2:url}")
                            $0
                            )

(spec-handling-add! popup nil
                    ('$1
                     ("^\\*$1\\*"  :side right  :ttl nil :width  0.5 :quit nil :select t :priority 50)
                     )
                    )
(spec-handling-add! projects
                    ('$1
                     ("marker-files")
                     :project-file project-file
                     :compilation-dir compilation-dir
                     :configure configure
                     :compile compile
                     :install install
                     :package package
                     :test test
                     :run run
                     :test-suffix test-suffix
                     :test-prefix test-prefix
                     :src-dir src-dir
                     :test-dir test-dir
                     :related-files-fn related-files-fn
                     )
                    )

(defvar $1-repl-buffer "*$1*")

(defvar $1-command     "$2")

(defun +$1-mode/open-repl (&optional arg)
  (interactive "P")
  (require '$1-mode)
  (if (not (bufferp $1-repl-buffer))
      ($1-repl))
  (get-buffer-create $1-repl-buffer)
  )

(set-repl-handler! '$1-mode '+$1-mode/open-repl)

(spec-handling-add! rotate-text nil
                    ('$1-mode
                     :symbols '(("t" "nil"))
                     :words '()
                     :patterns '()
                     )
                    )
