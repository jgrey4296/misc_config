# -*- mode: snippet -*-
# name  : ui-hook
# uuid  : ui-hook
# key   : ui-hook
# group :
# --
;; Template for registering and applying ui settings
(defvar jg-$1-spec-table       (make-hash-table))
(defvar jg-$1-spec-sort-fn     (lambda (a b) (< (car a) (car b))))
(defvar jg-$1-spec-extract-fn  (lambda (a) (cdr a)))

(defun +jg-$1-add-spec (sym rules &optional priority override)
  "Register a $1 spec for evil-$1-lit "
  (when (or (not (gethash sym jg-$1-spec-table)) override)
    (puthash sym (cons (or priority 0) rules) jg-$1-spec-table)
    )
  )
(defun +jg-$1-reapply-specs ()
  " Apply specs to the target "
  (interactive)
  (let ((vals (hash-table-values jg-$1-spec-table)))
    (setq $2  (mapcar jg-$1-spec-extract-fn
                                 (sort vals jg-$1-spec-sort-fn)))
  )
)
