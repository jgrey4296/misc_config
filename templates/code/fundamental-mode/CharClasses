# -*- mode: snippet -*-
# name: Char Classes
# uuid: CharClassRegex
# key: CharClassRegex
# --
[:cntrl:]      character whose code is in the range 0–31.
[:print:]      printing character—either whitespace, or a graphic character matched by ‘[:graph:]’.
[:blank:]      horizontal whitespace
[:space:]      character that has whitespace syntax

[:alpha:]      letter
[:lower:]      lower-case letter, as determined by the current case table (*note Case Tables::).  If ‘case-fold-search’ is non-‘nil’, this also matches any upper-case letter.
[:upper:]      upper-case letter, as determined by the current case table (*note Case Tables::).  If ‘case-fold-search’ is non-‘nil’, this also matches any lower-case letter.
[:word:]       character that has word syntax

[:digit:]      This matches ‘0’ through ‘9’.  Thus, ‘[-+[:digit:]]’ matches any digit, as well as ‘+’ and ‘-’.
[:xdigit:]     the hexadecimal digits: ‘0’ through ‘9’, ‘a’ through ‘f’ and ‘A’ through ‘F’.
[:alnum:]      letter or digit

[:ascii:]      ASCII character (codes 0–127)
[:nonascii:]   non-ASCII character
[:graph:]      graphic characters—everything except whitespace, ASCII and non-ASCII control characters
[:punct:]      punctuation character.  (At present, for multibyte characters, it matches anything that has non-word syntax.)

[:unibyte:]    unibyte character
[:multibyte:]  multibyte character

.        any character (but newline)
*        previous character or group, repeated 0 or more time
+        previous character or group, repeated 1 or more time
?        previous character or group, repeated 0 or 1 time
^        start of line
$        end of line
[...]    any character between brackets
[^..]    any character not in the brackets
[a-z]    any character between a and z
\        prevents interpretation of following special char
\|       or
\w       word constituent
\b       word boundary
\sc      character with c syntax (e.g. \s- for whitespace char)
\( \)    start/end of group
\&lt; \&gt;    start/end of word (faulty rendering: backslash + less-than and backslash + greater-than)
\_< \_>  start/end of symbol
\` \'    start/end of buffer/string
\1       string matched by the first group
\n       string matched by the nth group
\{3\}    previous character or group, repeated 3 times
\{3,\}   previous character or group, repeated 3 or more times
\{3,6\}  previous character or group, repeated 3 to 6 times
\=       match succeeds if it is located at point

\s-   whitespace character        \s/   character quote character
\sw   word constituent            \s$   paired delimiter
\s_   symbol constituent          \s'   expression prefix
\s.   punctuation character       \s<   comment starter
\s(   open delimiter character    \s>   comment ender
\s)   close delimiter character   \s!   generic comment delimiter
\s"   string quote character      \s|   generic string delimiter
\s\   escape character