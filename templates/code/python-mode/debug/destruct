# -*- mode: snippet -*-
# name  : debug.destruct
# uuid  : debug.destruct
# key   : debug.destruct
# group :
# --
DEBUG_DESTRUCT_ON = False

def _debug_del(self):
    """ standalone del logging """
    logging.warning("Deleting: %s", self)

def _debug_del_dec(fn):
    """ wraps existing del method """
    def _wrapped(*args):
        logging.warning("Deleting: %s", self)
        fn(*args)

def log_destruction(cls):
    """
    A Class Decorator, attaches a debugging statement to the object destructor
    """
    match (DEBUG_DESTRUCT_ON, hasattr(cls, "__del__")):
        case (False, _):
            pass
        case (True, True):
            setattr(cls, "__del__", _debug_del_dec(cls.__del__))
        case (True, False):
            setattr(cls, "__del__", _debug_instance_del)
    return cls
