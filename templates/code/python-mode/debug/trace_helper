# -*- mode: snippet -*-
# name  : trace_helper
# uuid  : trace_helper
# key   : trace_helper
# group :
# --

##-- imports
import types
import sys

##-- end imports

class TraceHelper:

    def __init__(self):
        self.frames = []
        self.get_frames()

    def __getitem__(self, val=None):
        match val:
            case None:
                return self.to_tb()
            case slice() | int():
                return self.to_tb(self.frames[val])
            case _:
                raise TypeError("Bad value passed to TraceHelper")
    def get_frames(self):
        """ from https://stackoverflow.com/questions/27138440 """
        tb    = None
        depth = 0
        while True:
            try:
                frame = sys._getframe(depth)
                depth += 1
            except ValueError as exc:
                break

            self.frames.append(frame)


    def to_tb(self, frames=None):
        top = None
        frames = frames or self.frames
        for frame in frames:
            top = types.TracebackType(top, frame,
                                     frame.f_lasti,
                                     frame.f_lineno)
        return top
