# -*- mode: snippet -*-
# name  : meta_pool
# uuid  : meta_pool
# key   : meta_pool
# group :
# --
class PoolMeta(type(Protocol)):
    """
    Create an instance field to hold the singleton,
    Subclasses are separate singletons
    """
    _pool_size = 10

    def __init__(cls, name:str, bases:tuple[type, ...], data:dict[str,Any]):
        super(PoolMeta, cls).__init__(name, bases, data)
        cls._pool      : list[Any] = []
        cls._pool_last = 0

    def __call__(cls, *args:Any) -> type:
        if cls._pool_last > cls._pool_size - 1:
            cls._pool_last = 0

        if len(cls._pool) < cls._pool_size:
            logging.debug("Constructing Singleton Pool: {}", cls.__name__)
            obj = super().__call__(*args)
            cls._pool.append(obj)
        else:
            obj = cls._pool[cls._pool_last]
            obj.__init__(*args)

        cls._pool_last += 1
        return obj
