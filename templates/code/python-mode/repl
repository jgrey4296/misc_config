# -*- mode: snippet -*-
# name  : repl
# uuid  : repl
# key   : repl
# group :
# --
import stackprinter
import cmd
# reminder: https://docs.python.org/3/library/cmd.html

@dataclass
class ReplState:
    """ Data used for control of the repl """
    prompt        : str                            =  field(default=":: ")
    prompt_ml     : str                            =  field(default=">> ")
    prompt_bkup   : str                            =  field(default="")
    collect_str   : list[str]                      =  field(default_factory=list)
    echo          : bool                           =  field(default=False)
    in_multi_line : bool                           =  field(default=False)
    indent        : int                            =  field(default=0)
    debug_data    : Any                            =  field(default=None)
    debugger      : Any                            =  field(default=None)
    last_err      : Any                            =  field(default=None)
    # run in alphabetical order:
    post_cmds     : dict[str, Callable[..., None]] =  field(default_factory=dict)


class REPL(cmd.Cmd):
    intro                                                   = "\n".join(repl_intro)
    prompt                                                  = initial_prompt + ": "
    _latebind                                               = []
    _default_startups  : ClassVar[list[Callable[..., Any]]] = []

    state  : ReplState = ReplState()

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)

        # For logging repl *inputs*
        self.trace_logger = logmod.getLogger("repl.trace")
        self.trace_logger.propagate = False

        for inst in self._latebind:
            if getattr(inst, "_repl") is not None:
                raise TypeError("Repl command instance is already bound to a repl")
            setattr(inst, "_repl", self)

        for fn in self._default_startups:
            fn(self, "")

    def default(self, line):
        """ Called when no other command matches """
        try:
            pass
        except Exception as err:
            logging.warning(stackprinter.format())
            logging.warning("\n--------------------\nFailure:\n")
            logging.warning(f"\n{err.args[-1]}\n")

    def precmd(self, line) -> str:
        """ For massaging the input command """
        # convert symbols -> cmd names.
        # eg: ':{' -> multi
        self.trace_logger.info("[repl]>>> " + line)
        try:
            logging.debug("PreCmd Parsing: {}".format(line))
            # line = f(line)
            logging.debug("PreCmd Result:{}".format(line))
            # Intercept if in multi line state
            if self.state.in_multi_line and not line[0] in ["multi", "pop", "exit", "echo"]:
                logging.info("In Multi")
                line = ["collect"] + line

            if bool(self.state.echo):
                print(f"{line}")

            return " ".join(line)

        except pp.ParseException as err:
            traceback.print_tb(err.__traceback__)
            logging.warning(f"Parse Failure: {err.markInputline()}")

    def onecmd(self, line) -> bool:
        try:
            return super().onecmd(line)
        except Exception as err:
            logging.warning(stackprinter.format())
            print(f"\n{err.args[-1]}\n")

    def postcmd(self, stop, line) -> bool:
        """
        Run any registered hooks to change state after performing a command
        """
        for name, hook in sorted(self.state.post_cmds.items()):
            hook(self)

        return stop

    def parseline(self, line) -> tuple[None|str, None|str, str]:
        """ Parse the line into a command name and a string containing
        the arguments.  Returns a tuple containing (command, args, line).
        'command' and 'args' may be None if the line couldn't be parsed.
        """
        if not self.state.in_multi_line:
            line = line.strip()

        match line:
            case "" | None:
                return None, None, line
            case _ if line[0] == "?":
                line = 'help ' + line[1:]
            case _ if line[0] == "!" and hasattr(self, 'do_shell'):
                line = 'shell ' + line[1:]
            case _:
                return None, None, line

        # split into cmd and args
        i, n = 0, len(line)
        while i < n and line[i] in self.identchars:
            i = i+1
        cmd, arg = line[:i], line[i:]

        if not self.state.in_multi_line:
            arg = arg.strip()

        return cmd, arg, line

    def emptyline(self):
        """ Overrides default of 'repeat last command' """
        return self.onecmd("print")


    @classmethod
    def register(cls, fn):
        """ Decorator for registering a function into the repl """
        logging.debug(f"{cls.__name__} Registration: {fn.__name__}")
        if "do_" not in fn.__name__:
            raise TypeError("Repl cmd must be named do_{}")
        if fn.__name__ in dir(cls):
            raise TypeError("Name Conflict with existing repl cmd: ", fn.__name__)
        setattr(cls, fn.__name__, fn)
        return fn

    @classmethod
    def register_class(cls, name):
        """ Register an entire class as the command bound to do_{name},
        (specifically the class' __call__ method)

        usage, to make do_bob:
        @register_class("bob")
        class BobCmd:....

        """
        def __register(target_cls):
            if not hasattr(target_cls, "__call__"):
                raise TypeError("Class has to be callable: ", target_cls)
            if not hasattr(cls, "_latebind"):
                raise TypeError("Class has to be marked _latebind: ", target_cls)
            if not hasattr(target_cls, "_repl"):
                raise TypeError("Class can't be marked _repl: ", target_cls)

            if (not bool(target_cls.__call__.__doc__)) and bool(target_cls.__doc__):
                target_cls.__call__.__doc__ = target_cls.__doc__

            instance = target_cls()
            setattr(cls, f"do_{name}", instance.__call__)
            setattr(instance, "_repl", None)

            cls._latebind.append(instance)
            return target_cls

        return __register


    @classmethod
    def register_default(cls, fn):
        """
        Register and automatically call the function when REPLCommander is created.
        eg: register_default(do_ctxprompt) means the repl will show active context numbers
        from startup

        """
        if not hasattr(cls, "_default_startups"):
            raise TypeError("Class must be marked _default_startups")

        cls.register(fn)
        cls._default_startups.append(fn)
