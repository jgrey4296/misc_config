(Allen 2016)
***** Recognition of Academic Software
1) properly cite software used to produce research results
2) point out improper or missing citations to software when I am reviewing publications.
3) make explicit how to cite the software I make available.
4) recommend software experts for funding agencies to include in their review processes.
5) invite developers of software that enables research to be co-authors on papers.
6) recognize software contributions in hiring and promotion within institution.
7) recognize software contributions at conferences, e.g. dedicated sessions, and prizes.
8) support and publish in journals that recognise software contributions.
9) contribute to sustaining the software I rely on for research.
***** Academic software development processes
10) develop software as open source right from the start whenever possible.
11) document academic software for users with instructions and examples.
12) package, release and archive versions of software
13) consider and document the sustainability of research software.
14) publish how I organize and run software projects
15) match software engineering practices I recommend to the needs and resources of projects.
16) help scientists improve the quality of their software without passing judgment.
***** The intellectual content of academic software
17) acknowledge that source code is a legitimate part of the academic discourse.
18) publish the intellectual contributions of research software.
19) distinguish the intellectual contribution of software from its service contribution.
20) examine the source code of academic software contributions and encourage others to do so as well.
