# -*- mode:python; -*-
"""
Tasks for setting up new systems

"""
# https://pydoit.org/
##-- imports
from __future__ import annotations
import pathlib as pl
import doot
##-- end imports

from doot.tasks.groups import *
from doot.tasks.groups_secondary import *

from doot import tasker
from doot.mixins.filer import FilerMixin
from doot.mixins.commander import CommanderMixin

class SetupSystemTask(tasker.DootTasker, FilerMixin, CommanderMixin):

    def __init__(self, name="system::setup", locs=None):
        super().__init__(name, locs)
        self.locs.ensure("home", "terminal", "github", "doom_d", "emacs_d", "cache" )

    def setup_detail(self, task):
        task.update({
            "actions": [
                (self.mkdirs, [self.locs.cache / ".cargo",
                               self.locs.config / "secrets",
                               self.locs.cache / ".gradle",
                               self.locs.cache / ".ghc",
                               self.locs.cache / "doot_build"
                               ])
            ]
        })
        return task

    def task_detail(self, task):
        task.update({
            (self.log, ["Initialising System", logmod.INFO]),
            self.cmd("ln", "-s", self.locs.emacs_d, self.locs.home / ".emacs.d"),
            self.cmd("ln", "-s", self.locs.doom_d,  self.locs.home / ".doom.d"),
            self.cmd("ln", "-s", self.locs.github,  self.locs.home / "github"),
            self.cmd("ln", "-s", self.locs.pdfs,    self.locs.home / "pdf_library")

            (self.log, ["Appending bash setup to bashrc", logmod.INFO]),
            (self.append_to, [self.locs.home / ".bashrc", "source $HOME/.bash_profile"]),

            (self.log, ["Appending bash setup to bash_profile", logmod.INFO]),
            (self.append_to, [self.locs.home / ".bash_profile", "source $HOME/.config/jg/bash/main.bash"]),

            self.setup_tool_configs,

            (self.log, ["Setting up 24-bit emacs", logmod.INFO]),
            self.cmd("tic", "-x", "-o", "~/.terminfo", self.locs.templates / "tools/terminfo-24bit.src"),

            (self.log, ["Completed Setup", logmod.INFO]),
            (self.log, ["Need to setup $HOME/.authinfo", logmod.INFO]),
        })
        return task

    def setup_tool_configs(self):
        self.log("Setting up tool config symlinks", logmod.INFO)
        for fpath in (self.locs.templates / "tools").iterdir():
            if not fpath.is_file() or fpath.name == ".DS_Store":
                continue

            if fpath.name == "cargo_config.toml":
                self.cmd("ln", "-s", fpath, "$HOME/.cargo/config.toml").execute()
            else:
                self.cmd("ln", "-s", fpath, "$HOME/$basefile").execute()

    def setup_conda_environments(self):
        self.log("Setting up Conda Envs", logmod.INFO)
        # for Yaml in $(find $HOME/.doom.d/templates/conda_envs/ -type f -name "*.yaml")
        # do
        # echo "Found Yaml: $Yaml"
        # conda env create -f "$Yaml"
        # done
        #

    def link_extra_binaries(self):
        for name,targ in doot.config.extra.binaries.get_table():
            # make symlink to self.locs.binaries
            # pass

if __name__ == "dooter":
    # the equivalent of main
    setup_sys = SetupSystemTask(locs=doot.locs)
    pass
