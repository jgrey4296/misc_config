#!/usr/bin/env python3
"""
$0
"""
##-- imports
from __future__ import annotations

import abc
import argparse
import configparser
import logging as logmod
from copy import deepcopy
from dataclasses import InitVar, dataclass, field
import pathlib
from re import Pattern
from sys import stderr, stdout
from typing import (TYPE_CHECKING, Any, Callable, ClassVar, Final, Generic,
                    Iterable, Iterator, Mapping, Match, MutableMapping,
                    Protocol, Sequence, Tuple, TypeAlias, TypeGuard, TypeVar,
                    cast, final, overload, runtime_checkable)
from uuid import UUID, uuid1
from weakref import ref
##-- end imports

##-- logging variables
DISPLAY_LEVEL     = logmod.DEBUG
FILE_LEVEL        = logmod.DEBUG
STREAM_TARGET     = stdout # or stderr

LOG_FILE_NAME     = "log.{}".format(pathlib.Path(__file__).stem)
FILE_MODE         = "w"
FILE_LOG_FORMAT   = None # or "%(asctime)s | %(levelname)8s | %(message)s"
STREAM_LOG_FORMAT = None # or "%(asctime)s | %(levelname)8s | %(message)s"
##-- end logging variables

##-- Logging Setup
logging         = logmod.root
console_handler = logmod.StreamHandler(STREAM_TARGET)
file_handler    = logmod.FileHandler(LOG_FILE_NAME, mode=FILE_MODE)

# Set Levels
logging.setLevel(logmod.NOTSET)
console_handler.setLevel(DISPLAY_LEVEL)
file_handler.setLevel(FILE_LEVEL)

if FILE_LOG_FORMAT is not None:
   console_handler.setFormatter(logmod.Formatter(FILE_LOG_FORMAT))

if STREAM_LOG_FORMAT is not None:
   file_handler.setFormatter(logmod.Formatter(STREAM_LOG_FORMAT))

logging.addHandler(console_handler)
logging.addHandler(file_handler)
##-- end Logging Setup

##-- argparse
#see https://docs.python.org/3/howto/argparse.html
parser = argparse.ArgumentParser(formatter_class=argparse.RawDescriptionHelpFormatter,
                                 epilog = "\n".join([""]))
argparser.add_argument("-v", "--verbose", action='count', help="increase verbosity of logging (repeatable)")
parser.add_argument('--aBool', action="store_true")

#args.aBool...

##-- End argparse

def main():
    args = parser.parse_args()
    verbosity = max(logmod.DEBUG, logmod.WARNING - (10 * (args.verbose or 0)))
    console_handler.setLevel(verbosity)

##-- ifmain
if __name__ == '__main__':
    main()

##-- end ifmain
