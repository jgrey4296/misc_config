#!/usr/bin/env python3
"""

"""
##-- builtin imports
from __future__ import annotations

# import abc
import datetime
import enum
import functools as ftz
import itertools as itz
import logging as logmod
import pathlib as pl
import re
import time
import types
import weakref
# from copy import deepcopy
# from dataclasses import InitVar, dataclass, field
from typing import (TYPE_CHECKING, Any, Callable, ClassVar, Final, Generic,
                    Iterable, Iterator, Mapping, Match, MutableMapping,
                    Protocol, Sequence, Tuple, TypeAlias, TypeGuard, TypeVar,
                    cast, final, overload, runtime_checkable)
from uuid import UUID, uuid1

##-- end builtin imports

##-- logging
logging = logmod.getLogger(__name__)
##-- end logging

import tomler
from sys import stdout, stderr

class LogConfig:
    """ Utility class to setup [stdout, stderr, file] logging. """

    class SimpleFilter:
        """ A Simple log filter. whitelist loggers by name in `names` and  blacklist `reject` """

        def __init__(self, names=None, reject=None):
            self.names      = names or []
            self.rejections = reject or []
            self.name_re    = re.compile("^({})".format("|".join(self.names)))

        def __call__(self, record):
            return (record.name not in self.rejections) and (record.name == "root"
                                                             or not bool(self.names)
                                                            or self.name_re.match(record.name))

    def __init__(self, config:None|pl.Path=None, logfile="log.doot"):
        self.root    = logmod.root
        self.printer = logmod.getLogger(doot.constants.printer_name)

        self.file_handler   = logmod.FileHandler(pl.Path(logfile), mode='w')
        self.stream_handler = logmod.StreamHandler(stdout)
        self.print_handler  = logmod.StreamHandler(stdout)


        self._setup()
        match config:
            case None:
                self._config = None
            case pl.Path() if config.exists():
                self._config = tomler.Tomler(config)
                self.setup()

    def _setup(self):
        """ a basic, config-less setup """
        self.root.setLevel(logmod.NOTSET)
        self.file_handler.setFormatter(logmod.Formatter("{levelname} : INIT : {message}", style="{"))

        self.stream_handler.setLevel(logmod.WARNING)
        self.stream_handler.setFormatter(logmod.Formatter("{levelname}  : INIT : {message}", style="{"))

        self.root.addHandler(self.file_handler)
        self.root.addHandler(self.stream_handler)

        self.printer.propagate = False
        self.print_handler.setFormatter(logmod.Formatter("{message}", style="{"))
        self.printer.setLevel(logmod.NOTSET)
        self.printer.addHandler(self.print_handler)
        self.printer.addHandler(self.file_handler)

    def setup(self):
        """ a setup that uses config values """
        file_log_level    = self._config.on_fail("DEBUG", str|int).logging.file.level(wrapper=lambda x: logmod._nameToLevel.get(x, 0))
        file_log_format   = self._config.on_fail("{levelname} : {pathname} : {lineno} : {funcName} : {message}", str).logging.file.format()
        file_filter_names = self._config.on_fail([], list).logging.file.filters()

        self.file_handler.setLevel(file_log_level)
        self.file_handler.setFormatter(logmod.Formatter(file_log_format, style="{"))
        if bool(file_filter_names):
            self.file_handler.addFilter(SimpleFilter(file_filter_names))

        stream_log_level    = self._config.on_fail("DEBUG", str|int).logging.stream.level(wrapper=lambda x: logmod._nameToLevel.get(x, 0))
        stream_log_format   = self._config.on_fail("{levelname} : {pathname} : {lineno} : {funcName} : {message}", str).logging.stream.format()
        stream_filter_names = self._config.on_fail([], list).logging.stream.filters()

        self.stream_handler.setLevel(stream_log_level)
        self.stream_handler.setFormatter(logmod.Formatter(stream_log_format, style="{"))
        if bool(stream_filter_names):
            self.stream_handler.addFilter(SimpleFilter(stream_filter_names))
