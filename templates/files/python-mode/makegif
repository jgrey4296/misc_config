# -*- mode: snippet -*-
# name: template.makegif
# uuid: template.makegif
# group: visualisation
# --
#!/usr/bin/env python3
##-- imports
from __future__ import annotations

import logging as logmod
import pathlib as pl
import sys
from typing import (TYPE_CHECKING, Any, Callable, ClassVar, Final, Generic,
                    Iterable, Iterator, Mapping, Match, MutableMapping,
                    Protocol, Sequence, Tuple, TypeAlias, TypeGuard, TypeVar,
                    cast, final, overload, runtime_checkable)

import imageio
from PIL import Image, ImageSequence
##-- end imports

##-- logging
LOGLEVEL    = log_mod.DEBUG
logFileName = "gif_write.log"
log_mod.basicConfig(filename=logFileName, level=LOGLEVEL, filemode='w')

console = log_mod.StreamHandler()
console.setLevel(log_mod.INFO)
log_mod.getLogger('').addHandler(console)
logging = log_mod.getLogger(__name__)
##-- end logging

##-- constants
GIF_OUTPUT_DIR = pl.Path(".")
GIF_NAME       = "anim.gif"

SOURCE_DIR     = pl.Path('images')
FILE_FORMAT    = '.png'
FPS            =12
numRegex       = re.compile(r'(\d+)')
##-- end constants

##-- util
def getNum(s):
    """ Given a String, extract a number from it,
    or return a default """
    logging.info("Getting num of: {}".format(s))
    try:
        return int(numRegex.search(s).group(0))
    except Exception:
        return 9999999
##-- end util

def main():
    # Get all Files
    files = [x for x in SOURCE_DIR.iterdir() if x.is_file()]
    # Sort by the number extracted from the filename
    files.sort(key=lambda x: getNum(x))

    # Load the images
    images = []
    for filename in files:
        logging.info("Loading: {}".format(filename))
        images.append(imageio.imread(filename))


    # Export as a Gif
    imageio.mimsave(GIF_OUTPUT_DIR/GIF_NAME,images,'GIF')

def alt_main():
    # Alternative main, for when all the images can't fit in memory:
    #
    # Get all Files
    files = [x for x in SOURCE_DIR.iterdir() if x.is_file()]
    # Sort by the number extracted from the filename
    files.sort(key=lambda x: getNum(x))

    with imageio.get_writer(join(GIF_OUTPUT_DIR,GIF_NAME), mode='I') as writer:
        for filename in files:
            image = imageio.imread(join(SOURCE_DIR,filename))
            writer.append_data(image)


##-- main
if __name__ == "__main__":
    main()
##-- end main
