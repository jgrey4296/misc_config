# -*- mode: snippet -*-
# name  : toml_defaults
# uuid  : toml_defaults
# key   : toml_defaults
# group :
# --
#!/usr/bin/env python3
"""

"""
##-- imports
from __future__ import annotations

import os
import pathlib as pl
from importlib.resources import files

try:
    # For py 3.11 onwards:
    import tomllib as toml
except ImportError:
    # Fallback to external package
    import toml
##-- end imports

default_toml  = files("$1.__data") / "defaults.toml"

__loaded_toml = toml.loads(default_toml.read_text())['tool']['instal']

class TomlAccessError(KeyError):
    pass


class TomlAccessor:

    def __init__(self, attr, table):
        object.__setattr__(self, "__table", table)
        object.__setattr__(self, "__path", [attr])

    def keys(self):
        return self.__table.keys()

    def __setattr__(self, attr, value):
        raise TomlAccessError(attr)

    def __getattr__(self, attr):
        result = object.__getattribute__(self, "__table").get(attr)
        path   = object.__getattribute__(self, "__path")
        if result is None:
            raise TomlAccessError(f"{path}.{attr}")

        if isinstance(result, dict):
            return TomlAccessor(f"{path}.{attr}", result)

        return result

def __getattr__(attr):
    result = __loaded_toml.get(attr)
    if result is None:
        raise TomlAccessError(attr)

    if isinstance(result, dict):
        return TomlAccessor(attr, result)

    return result


def __dir__():
    return list(__loaded_toml.keys())

def set_defaults(path: pl.Path):
    global __loaded_toml
    __loaded_toml = toml.loads(path.read_text())['tool']['$1']
