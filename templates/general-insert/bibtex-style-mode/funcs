Bibtex Stack Functions:
FUNCTION { } # define a new function
+            # addition. int -> int -> int
-            # subtraction. int -> int -> int
>            # greater than. int -> int -> 1 | 0
<            # less than. int -> int -> 1 | 0
=            # equal. int -> int -> 1 | 0
=            # string equal. str -> str -> 1 | 0
*            # string concat. str1 -> str2 -> str1str2
:=           # assignment. str|int -> var -> nil
add.period$  # str -> str,
call.type$   # execute function named entry type
change.case$ # lowercase, except for first letter.. str -> "t" -> str
change.case$ # lowercase. str -> "l" -> str
change.case$ # uppercase. str -> "l" -> str
chr.to.int$  # str -> int
cite$        # nil -> key
duplicate$   # Any -> Any
empty$       # str -> 1 | 0
format.name$ # extract name intfrom str1, format it by str2.  str1 -> int -> str2 -> str
global.max$  # nil -> int
if$          # int -> block -> block
int.to.chr$  # int -> str
int.to.str$  # int -> str
missing$     # field -> 1 | 0
newline$     # flush output. nil -> nil
num.names$   # str -> int
pop$         # nil -> nil
preamble$    # add call preamble strings to stack. nil -> str.
purify$      # clean str. str -> str
quote$       # nil -> \"
skip$        # nil -> nil
sort.key$    # nil -> str
stack$       # print stack to stdout, clear it. nil -> nil.
substring$   # str -> int -> int -> str
swap$        # nil -> nil
text.length$ # str -> int
text.prefix$ # str -> int -> str
top$         # print top of stack to stdout. nil -> nil
type$        # type of current entry. nil -> str
warning$     # write str to stdout. str -> nil
while$       # loop while block1 returns positive int.  block1 -> block -> nil
width$       # str -> int
write$       # output. write str to .bbl file. str -> nil

__reminder__ # reverse polish notation
