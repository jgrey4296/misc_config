Python Dependency Spec Grammar:
[Epoch]Release[preRelease][postRelease][devRelease][local] # 440 spec
N'!'                                                       # Epoch
N('.'N)*                                                   # Release
{'a'|'b'|'rc'}N                                            # preRelease
'.post'N                                                   # postRelease
'.dev'N                                                    # devRelease
'+'[a-zA-Z0-9.]+                                           # local

{} @ file://{path.zip}              # local spec
{} @ https://{url}#sha1={hash}      # remote spec
{} @ git+https://{url}.git@{commit} # remote spec

.* # trailing release matcher

,python_version=3.{} #

~=     # compatiable
==     # match
!=     # exclusion
<=, <= # inclusive
<, >   # exclusive
===    # arbitrary

__source__                                                 # https://peps.python.org/pep-0508/
__source__                                                 # https://peps.python.org/pep-0440/

{name}[{extras}]


specification  = ( url_req | name_req )
url_req        = name [extras]? urlspec quoted_marker?
name_req       = name [extras]? versionspec? quoted_marker?

version_cmp    = '<' | '<=' | '!=' | '==' | '>=' | '>' | '~=' | '==='
version        = ( letterOrDigit | '-' | '_' | '.' | '*' | '+' | '!' )+
version_one    = version_cmp version
version_many   = version_one (',' version_one)*
versionspec    = ( '(' version_many ')' ) | version_many
urlspec        = '@' <URI_reference>

marker_op      = version_cmp | 'in' | 'not in'
python_str_c   = (letter | digit | py_str_c1 | py_str_c2 | py_str_c3 | py_str_c3 | py_str_c4)
py_str_c1      = '(' | ')' | '.' | '{' | '}'
py_str_c2      = '-' | '_' | '*' | '#' | ':' | ';' | ',' | '/' | '?'
py_str_c3      = '[' | ']' | '!' | '~' | '`' | '@' | '$' | '%' | '^'
py_str_c4      = '&' | '=' | '+' | '|' | '<' | '>'
dquote         = '"'
squote         = '\\''
python_str     = (squote (python_str_c | dquote)* squote | dquote (python_str_c | squote)* dquote)
env_var        = ('python_version' | 'python_full_version' | 'os_name' | 'sys_platform' | 'platform_release' | 'platform_system' | 'platform_version' | 'platform_machine' | 'platform_python_implementation' | 'implementation_name' | 'implementation_version' | 'extra' # ONLY when defined by a containing layer)
marker_var     = env_var | python_str
marker_expr    = marker_var marker_op marker_var | '(' marker ')'
marker_and     = marker_expr 'and' marker_expr | marker_expr
marker_or      = marker_and 'or' marker_and | marker_and
marker         = marker_or
quoted_marker  = ';' marker

identifier_end = letterOrDigit | (('-' | '_' | '.' )* letterOrDigit)
identifier     = letterOrDigit identifier_end*
name           = identifier
extras         = identifier (',' identifier)*



URI_reference = <URI | relative_ref>
URI           = scheme ':' hier_part ('?' query )? ( '#' fragment)?
hier_part     = ('//' authority path_abempty) | path_absolute | path_rootless | path_empty
absolute_URI  = scheme ':' hier_part ( '?' query )?
relative_ref  = relative_part ( '?' query )? ( '#' fragment )?
relative_part = '//' authority path_abempty | path_absolute | path_noscheme | path_empty
scheme        = letter ( letter | digit | '+' | '-' | '.')*
authority     = ( userinfo '@' )? host ( ':' port )?
userinfo      = ( unreserved | pct_encoded | sub_delims | ':')*
host          = IP_literal | IPv4address | reg_name
port          = digit*
IP_literal    = '[' IPvFuture ']'
IPvFuture     = 'v' hexdig+ '.' ( unreserved | sub_delims | ':')+
h16           = hexdig{1,4}
ls32          = ( h16 ':' h16) | IPv4address
IPv4address   = dec_octet '.' dec_octet '.' dec_octet '.' dec_octet
nz            = ~'0' digit
dec_octet     = (0-255)
reg_name = ( unreserved | pct_encoded | sub_delims)*
path = (path_abempty | path_absolute | path_noscheme | path_rootless | path_empty )
path_abempty  = ( '/' segment)*
path_absolute = '/' ( segment_nz ( '/' segment)* )?
path_noscheme = segment_nz_nc ( '/' segment)*
path_rootless = segment_nz ( '/' segment)*
path_empty    = pchar{0}
segment       = pchar*
segment_nz    = pchar+
segment_nz_nc = ( unreserved | pct_encoded | sub_delims | '@')+ # non-zero-length segment without any colon ':'
pchar         = unreserved | pct_encoded | sub_delims | ':' | '@'
query         = ( pchar | '/' | '?')*
fragment      = ( pchar | '/' | '?')*
pct_encoded   = '%' hexdig
unreserved    = letter | digit | '-' | '.' | '_' | '~'
reserved      = gen_delims | sub_delims
gen_delims    = ':' | '/' | '?' | '#' | '(' | ')?' | '@'
sub_delims    = '!' | '$' | '&' | '\\'' | '(' | ')' | '*' | '+' | ',' | ';' | '='
hexdig        = digit | 'a' | 'A' | 'b' | 'B' | 'c' | 'C' | 'd' | 'D' | 'e' | 'E' | 'f' | 'F'
