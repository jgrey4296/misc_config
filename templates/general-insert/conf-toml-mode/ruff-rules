Ruff Rules:
__source__                                                     # https://beta.ruff.rs/docs/rules/

airflow-variable-name-task-id-mismatch              (AIR001)   #
commented-out-code                                  (ERA001)   #
sys-version-slice3                                  (YTT101)   # Checks for uses of `sys.version[:3]`.
sys-version2                                        (YTT102)   # Checks for uses of `sys.version[2]`.
sys-version-cmp-str3                                (YTT103)   # Checks for comparisons that test `sys.version` against string literals, failing on 3.10+
sys-version-info0-eq3                               (YTT201)   # e.g., `sys.version_info[0] == 3`
six-py3                                             (YTT202)   # Checks for uses of `six.PY3`.
sys-version-info1-cmp-int                           (YTT203)   # Checks for comparisons that test `sys.version_info[1]` against an integer.
sys-version-info-minor-cmp-int                      (YTT204)   # Checks for comparisons that test `sys.version_info.minor` against an integer.
sys-version0                                        (YTT301)   # Checks for uses of `sys.version[0]`.
sys-version-cmp-str10                               (YTT302)   # Checks for comparisons that test `sys.version` against string literals,
sys-version-slice1                                  (YTT303)   # Checks for uses of `sys.version[:1]`.
missing-type-function-argument                      (ANN001)   # Checks that function arguments have type annotations.
missing-type-args                                   (ANN002)   # Checks that function `*args` arguments have type annotations.
missing-type-kwargs                                 (ANN003)   # Checks that function `**kwargs` arguments have type annotations.
missing-type-self                                   (ANN101)   # Checks that instance method `self` arguments have type annotations.
missing-type-cls                                    (ANN102)   # Checks that class method `cls` arguments have type annotations.
missing-return-type-undocumented-public-function    (ANN201)   # Checks that public functions and methods have return type annotations.
missing-return-type-private-function                (ANN202)   # Checks that private functions and methods have return type annotations.
missing-return-type-special-method                  (ANN204)   # Checks that "special" methods, like `__init__`, `__new__`, and `__call__`, have type annotations
missing-return-type-static-method                   (ANN205)   # Checks that static methods have return type annotations.
missing-return-type-class-method                    (ANN206)   # Checks that class methods have return type annotations.
any-type                                            (ANN401)   # Checks that an expression is annotated with a more specific type than 'Any'.
blocking-http-call-in-async-function                (ASYNC100) # Checks that async functions do not contain blocking HTTP calls.
open-sleep-or-subprocess-in-async-function          (ASYNC101) # Checks that async functions do not contain calls to `open`, `time.sleep`, or 'subprocess'
blocking-os-call-in-async-function                  (ASYNC102) # Checks that async functions do not contain calls to blocking synchronous 'os' calls.
assert                                              (S101)     # Checks for uses of the `assert` keyword, which is removed when using -O
exec-builtin                                        (S102)     # Checks for uses of the builtin `exec` function.
bad-file-permissions                                (S103)     # Checks for files with overly permissive permissions.
hardcoded-bind-all-interfaces                       (S104)     # Checks for hardcoded bindings to all network interfaces (`0.0.0.0`).
hardcoded-password-string                           (S105)     # Checks for potential uses of hardcoded passwords in strings.
hardcoded-password-func-arg                         (S106)     # Checks for potential uses of hardcoded passwords in function calls.
hardcoded-password-default                          (S107)     # Checks for potential uses of hardcoded passwords in function argument defaults
hardcoded-temp-file                                 (S108)     # Checks for the use of hardcoded temporary file or directory paths.
try-except-pass                                     (S110)     # Checks for uses of the `try`-`except`-`pass` pattern.
try-except-continue                                 (S112)     # Checks for uses of the `try`-`except`-`continue` pattern.
request-without-timeout                             (S113)     # Checks for uses of the Python `requests` module that omit the `timeout` parameter.
suspicious-pickle-usage                             (S301)     # Checks for calls to `pickle` functions or modules that wrap them.
suspicious-marshal-usage                            (S302)     # Checks for calls to `marshal` functions.
suspicious-insecure-hash-usage                      (S303)     # Checks for uses of weak or broken cryptographic hash functions.
suspicious-insecure-cipher-usage                    (S304)     # Checks for uses of weak or broken cryptographic ciphers.
suspicious-insecure-cipher-mode-usage               (S305)     # Checks for uses of weak or broken cryptographic cipher modes.
suspicious-mktemp-usage                             (S306)     # Checks for uses of `tempfile.mktemp`. Use mkstemp.
suspicious-eval-usage                               (S307)     # Checks for uses of the builtin `eval()` function.
suspicious-mark-safe-usage                          (S308)     # Checks for uses of calls to `django.utils.safestring.mark_safe`.
suspicious-url-open-usage                           (S310)     # Checks for uses of URL open functions that unexpected schemes.
suspicious-non-cryptographic-random-usage           (S311)     # Checks for uses of cryptographically weak pseudo-random number generators.
suspicious-telnet-usage                             (S312)     # Checks for the use of Telnet-related functions.
suspicious-xmlc-element-tree-usage                  (S313)     # Checks for uses of insecure XML parsers. use defusedxml instead
suspicious-xml-element-tree-usage                   (S314)     # Checks for uses of insecure XML parsers.
suspicious-xml-expat-reader-usage                   (S315)     # Checks for uses of insecure XML parsers.
suspicious-xml-expat-builder-usage                  (S316)     # Checks for uses of insecure XML parsers.
suspicious-xml-sax-usage                            (S317)     # Checks for uses of insecure XML parsers.
suspicious-xml-mini-dom-usage                       (S318)     # Checks for uses of insecure XML parsers.
suspicious-xml-pull-dom-usage                       (S319)     # Checks for uses of insecure XML parsers.
suspicious-xmle-tree-usage                          (S320)     # Checks for uses of insecure XML parsers.
suspicious-ftp-lib-usage                            (S321)     # Checks for the use of FTP-related functions.
suspicious-unverified-context-usage                 (S323)     # Checks for uses of `ssl._create_unverified_context`.
hashlib-insecure-hash-function                      (S324)     # Checks for uses of weak or broken cryptographic hash functions.
request-with-no-cert-validation                     (S501)     # Checks for HTTPS requests that disable SSL certificate checks.
unsafe-yaml-load                                    (S506)     # Checks for uses of the `yaml.load` function.
snmp-insecure-version                               (S508)     # Checks for uses of SNMPv1 or SNMPv2.
snmp-weak-cryptography                              (S509)     # Checks for uses of the SNMPv3 protocol without encryption.
hardcoded-sql-expression                            (S608)     # Checks for strings that resemble SQL statements involved in some form string building operation.
unix-command-wildcard-injection                     (S609)     # Possible wildcard injection in call due to `*` usage
logging-config-insecure-listen                      (S612)     # Use of insecure `logging.config.listen` detected
jinja2-autoescape-false                             (S701)     # Using jinja2 templates with `autoescape=False` is dangerous and can lead to XSS. Ensure `autoescape=True` or use the `select_autoescape` function.
blind-except                                        (BLE001)   # Checks for `except` clauses that catch all exceptions.
boolean-positional-arg-in-function-definition       (FBT001)   # Checks for boolean positional arguments in function definitions.
boolean-default-value-in-function-definition        (FBT002)   # Checks for the use of booleans as default values in function definitions.
boolean-positional-value-in-function-call           (FBT003)   # Checks for boolean positional arguments in function calls.
unary-prefix-increment                              (B002)     # Checks for uses of the unary prefix increment operator (e.g., `++n`).
assignment-to-os-environ                            (B003)     # Checks for assignments to `os.environ`.
unreliable-callable-check                           (B004)     # Checks for uses of `hasattr` to test if an object is callable (e.g.,
strip-with-multi-characters                         (B005)     # Checks for uses of multi-character strings in `.strip()`, `.lstrip()`, and
mutable-argument-default                            (B006)     # Checks for uses of mutable objects as function argument defaults.
unused-loop-control-variable                        (B007)     # Checks for unused variables in loops (e.g., `for` and `while` statements).
function-call-in-default-argument                   (B008)     # Checks for function calls in default function arguments.
get-attr-with-constant                              (B009)     # Checks for uses of `getattr` that take a constant attribute value as an argument (e.g., `getattr(obj, "foo")`).
set-attr-with-constant                              (B010)     # Checks for uses of `setattr` that take a constant attribute value as an argument (e.g., `setattr(obj, "foo", 42)`).
assert-false                                        (B011)     # Checks for uses of `assert False`.
jump-statement-in-finally                           (B012)     # Checks for `break`, `continue`, and `return` statements in `finally` blocks
redundant-tuple-in-exception-handler                (B013)     # Checks for single-element tuples in exception handlers (e.g., except (ValueError,): )
duplicate-handler-exception                         (B014)     # Checks for exception handlers that catch duplicate exceptions.
useless-comparison                                  (B015)     # Checks for useless comparisons.
raise-literal                                       (B016)     # Checks for `raise` statements that raise a literal value.
assert-raises-exception                             (B017)     # Checks for `assertRaises` and `pytest.raises` context managers that catch 'Exception' or 'BaseException'
useless-expression                                  (B018)     # Checks for useless expressions.
cached-instance-method                              (B019)     # Checks for uses of the `functools.lru_cache` and `functools.cache`
loop-variable-overrides-iterator                    (B020)     # Checks for loop control variables that override the loop iterable.
f-string-docstring                                  (B021)     # Checks for docstrings that are written via f-strings.
useless-contextlib-suppress                         (B022)     # Checks for `contextlib.suppress` without arguments.
function-uses-loop-variable                         (B023)     # Checks for function definitions that use a loop variable.
abstract-base-class-without-abstract-method         (B024)     # Checks for abstract classes without abstract methods.
duplicate-try-block-exception                       (B025)     # Checks for `try-except` blocks with duplicate exception handlers.
star-arg-unpacking-after-keyword-arg                (B026)     # Checks for function calls that use star-argument unpacking after providing a keyword argument
empty-method-without-abstract-decorator             (B027)     # Checks for empty methods in abstract base classes without an abstract
no-explicit-stacklevel                              (B028)     # Checks for `warnings.warn` calls without an explicit `stacklevel` keyword
except-with-empty-tuple                             (B029)     # Checks for exception handlers that catch an empty tuple.
except-with-non-exception-classes                   (B030)     # Checks for exception handlers that catch non-exception classes.
reuse-of-groupby-generator                          (B031)     # Checks for multiple usage of the generator returned from
unintentional-type-annotation                       (B032)     # Checks for the unintentional use of type annotations.
duplicate-value                                     (B033)     # Checks for set literals that contain duplicate items.
re-sub-positional-args                              (B034)     # Checks for calls to `re.sub`, `re.subn`, and `re.split` that pass `count`,
raise-without-from-inside-except                    (B904)     # Checks for `raise` statements in exception handlers that lack a `from`
zip-without-explicit-strict                         (B905)     # Checks for `zip` calls without an explicit `strict` parameter.
builtin-variable-shadowing                          (A001)     # Checks for variable (and function) assignments that use the same name
builtin-argument-shadowing                          (A002)     # Checks for any function arguments that use the same name as a builtin.
builtin-attribute-shadowing                         (A003)     # Checks for any class attributes that use the same name as a builtin.
missing-trailing-comma                              (COM812)   # Checks for the absence of trailing commas.
trailing-comma-on-bare-tuple                        (COM818)   # Checks for the presence of trailing commas on bare (i.e., unparenthesized) tuples
prohibited-trailing-comma                           (COM819)   # Checks for the presence of prohibited trailing commas.
unnecessary-generator-list                          (C400)     # Checks for unnecessary generators that can be rewritten as `list` comprehensions.
unnecessary-generator-set                           (C401)     # Checks for unnecessary generators that can be rewritten as `set` comprehensions.
unnecessary-generator-dict                          (C402)     # Checks for unnecessary generators that can be rewritten as `dict` comprehensions.
unnecessary-list-comprehension-set                  (C403)     # Checks for unnecessary list comprehensions.
unnecessary-list-comprehension-dict                 (C404)     # Checks for unnecessary list comprehensions.
unnecessary-literal-set                             (C405)     # Checks for `set` calls that take unnecessary `list` or `tuple` literals as arguments.
unnecessary-literal-dict                            (C406)     # Checks for unnecessary `list` or `tuple` literals.
unnecessary-collection-call                         (C408)     # Checks for unnecessary `dict`, `list` or `tuple` calls that can be rewritten as empty literals.
unnecessary-literal-within-tuple-call               (C409)     # Checks for `tuple` calls that take unnecessary list or tuple literals as arguments.
unnecessary-literal-within-list-call                (C410)     # Checks for `list` calls that take unnecessary list or tuple literals as arguments.
unnecessary-list-call                               (C411)     # Checks for unnecessary `list` calls around list comprehensions.
unnecessary-call-around-sorted                      (C413)     # Checks for unnecessary `list` or `reversed` calls around `sorted` calls.
unnecessary-double-cast-or-process                  (C414)     # Checks for unnecessary `list`, `reversed`, `set`, `sorted`, and `tuple` call within `list`, `set`, `sorted`, and `tuple` calls.
unnecessary-subscript-reversal                      (C415)     # Checks for unnecessary subscript reversal of iterable.
unnecessary-comprehension                           (C416)     # Checks for unnecessary `dict`, `list`, and `set` comprehension.
unnecessary-map                                     (C417)     # Checks for unnecessary `map` calls with `lambda` functions.
unnecessary-literal-within-dict-call                (C418)     # Checks for `dict` calls that take unnecessary `dict` literals or `dict` comprehensions as arguments.
unnecessary-comprehension-any-all                   (C419)     # Checks for unnecessary list comprehensions passed to `any` and `all`.
missing-copyright-notice                            (CPY001)   # Checks for the absence of copyright notices within Python files.
call-date-fromtimestamp                             (DTZ012)   # Checks for the presence of debugger calls and imports.
raw-string-in-exception                             (EM101)    # Checks for the use of string literals in exception constructors.
f-string-in-exception                               (EM102)    # Checks for the use of f-strings in exception constructors.
dot-format-in-exception                             (EM103)    # Checks for the use of `.format` calls on string literals in exception constructors.
shebang-not-executable                              (EXE001)   # Checks for a shebang directive in a file that is not executable.
shebang-missing-executable-file                     (EXE002)   # Checks for executable `.py` files that do not have a shebang.
shebang-missing-python                              (EXE003)   # Checks for a shebang directive in `.py` files that does not contain `python`.
shebang-leading-whitespace                          (EXE004)   # Checks for whitespace before a shebang directive.
shebang-not-first-line                              (EXE005)   # Checks for a shebang directive that is not at the beginning of the file.
line-contains-fixme                                 (FIX001)   # Checks for "FIXME" comments.
line-contains-todo                                  (FIX002)   # Checks for "TODO" comments.
line-contains-xxx                                   (FIX003)   # Checks for "XXX" comments.
line-contains-hack                                  (FIX004)   # Checks for "HACK" comments.
future-rewritable-type-annotation                   (FA100)    # Checks for missing `from __future__ import annotations` imports upon detecting type annotations that can be written more succinctly under
future-required-type-annotation                     (FA102)    # Checks for uses of PEP 585- and PEP 604-style type annotations in Python modules that lack the required `from __future__ import annotations` import
f-string-in-get-text-func-call                      (INT001)   # Checks for f-strings in `gettext` function calls.
format-in-get-text-func-call                        (INT002)   # Checks for `str.format` calls in `gettext` function calls.
printf-in-get-text-func-call                        (INT003)   # Checks for printf-style formatted strings in `gettext` function calls.
single-line-implicit-string-concatenation           (ISC001)   # Checks for implicitly concatenated strings on a single line.
multi-line-implicit-string-concatenation            (ISC002)   # Checks for implicitly concatenated strings that span multiple lines.
explicit-string-concatenation                       (ISC003)   # Checks for string literals that are explicitly concatenated (using the `+` operator).
unconventional-import-alias                         (ICN001)   # Checks for imports that are typically imported using a common convention, like `import pandas as pd`, and enforces that convention.
banned-import-alias                                 (ICN002)   # Checks for imports that use non-standard naming conventions, like `import tensorflow.keras.backend as K`.
banned-import-from                                  (ICN003)   # Checks for member imports that should instead be accessed by importing the module.
logging-string-format                               (G001)     # Checks for uses of `str.format` to format logging messages.
logging-percent-format                              (G002)     # Checks for uses of `printf`-style format strings to format logging messages.
logging-string-concat                               (G003)     # Checks for uses string concatenation via the `+` operator to format logging messages.
logging-f-string                                    (G004)     # Checks for uses of f-strings to format logging messages.
logging-warn                                        (G010)     # Checks for uses of `logging.warn` and `logging.Logger.warn`.
logging-extra-attr-clash                            (G101)     # Checks for `extra` keywords in logging statements that clash with `LogRecord` attributes.
logging-exc-info                                    (G201)     # Checks for uses of `logging.error` that pass `exc_info=True`.
logging-redundant-exc-info                          (G202)     # Checks for redundant `exc_info` keyword arguments in logging statements.
implicit-namespace-package                          (INP001)   # Checks for packages that are missing an `__init__.py` file.
unnecessary-pass                                    (PIE790)   # Checks for unnecessary `pass` statements in class and function bodies. where it is not needed syntactically (e.g., when an indented docstring is
duplicate-class-field-definition                    (PIE794)   # Checks for duplicate field definitions in classes.
non-unique-enums                                    (PIE796)   # Checks for enums that contain duplicate values.
unnecessary-spread                                  (PIE800)   # Checks for unnecessary dictionary unpacking operators (`**`).
unnecessary-dict-kwargs                             (PIE804)   # Checks for unnecessary `dict` kwargs.
reimplemented-list-builtin                          (PIE807)   # Checks for lambdas that can be replaced with the `list` builtin.
multiple-starts-ends-with                           (PIE810)   # Checks for `startswith` or `endswith` calls on the same value with different prefixes or suffixes.
print                                               (T201)     # Checks for `print` statements.
p-print                                             (T203)     # Checks for `pprint` statements.
unprefixed-type-param                               (PYI001)   # Checks that type `TypeVar`, `ParamSpec`, and `TypeVarTuple` definitions in stubs are prefixed with `_`.
complex-if-statement-in-stub                        (PYI002)   # Checks for `if` statements with complex conditionals in stubs.
unrecognized-version-info-check                     (PYI003)   # Checks for problematic `sys.version_info`-related conditions in stubs.
patch-version-comparison                            (PYI004)   # Checks for Python version comparisons in stubs that compare against patch versions (e.g., Python 3.8.3) instead of major and minor versions (e.g.,
wrong-tuple-length-version-comparison               (PYI005)   # Checks for Python version comparisons that compare against a tuple of the wrong length.
bad-version-info-comparison                         (PYI006)   # Checks for uses of comparators other than `<` and `>=` for `sys.version_info` checks in `.pyi` files. All other comparators, such
unrecognized-platform-check                         (PYI007)   # Check for unrecognized `sys.platform` checks. Platform checks should be simple string comparisons.
unrecognized-platform-name                          (PYI008)   # Check for unrecognized platform names in `sys.platform` checks.
pass-statement-stub-body                            (PYI009)   # Empty body should contain `...`, not `pass`
non-empty-stub-body                                 (PYI010)   # Function body must contain only `...`
typed-argument-default-in-stub                      (PYI011)   # Only simple default values allowed for typed arguments
pass-in-class-body                                  (PYI012)   # Class body must not contain `pass`
ellipsis-in-non-empty-class-body                    (PYI013)   # Removes ellipses (`...`) in otherwise non-empty class bodies.
argument-default-in-stub                            (PYI014)   # Only simple default values allowed for arguments
assignment-default-in-stub                          (PYI015)   # Only simple default values allowed for assignments
duplicate-union-member                              (PYI016)   # Duplicate union member `{}`
complex-assignment-in-stub                          (PYI017)   # Checks for assignments with multiple or non-name targets in stub files.
quoted-annotation-in-stub                           (PYI020)   # Quoted annotations should not be included in stubs
docstring-in-stub                                   (PYI021)   # Docstrings should not be included in stubs
collections-named-tuple                             (PYI024)   # Checks for uses of `collections.namedtuple` in stub files.
unaliased-collections-abc-set-import                (PYI025)   # Checks for `from collections.abc import Set` imports that do not alias `Set` to `AbstractSet`.
type-alias-without-annotation                       (PYI026)   # Checks for type alias definitions that are not annotated with `typing.TypeAlias`.
str-or-repr-defined-in-stub                         (PYI029)   # Checks for redundant definitions of `__str__` or `__repr__` in stubs.
unnecessary-literal-union                           (PYI030)   # Checks for the presence of multiple literal types in a union.
any-eq-ne-annotation                                (PYI032)   # Checks for `__eq__` and `__ne__` implementations that use `typing.Any` as the type annotation for the `obj` parameter.
type-comment-in-stub                                (PYI033)   # Checks for the use of type comments (e.g., `x = 1  # type: int`) in stub files.
non-self-return-type                                (PYI034)   # Checks for methods that are annotated with a fixed return type, which should instead be returning `self`.
unassigned-special-variable-in-stub                 (PYI035)   # Derived from the **flake8-pyi** linter.
bad-exit-annotation                                 (PYI036)   # Checks for incorrect function signatures on `__exit__` and `__aexit__` methods.
redundant-numeric-union                             (PYI041)   # Checks for union annotations that contain redundant numeric types (e.g., `int | float`).
snake-case-type-alias                               (PYI042)   # Type alias `{name}` should be CamelCase
t-suffixed-type-alias                               (PYI043)   # Private type alias `{name}` should not be suffixed with `T` (the `T` suffix implies that an object is a `TypeVar`)
future-annotations-in-stub                          (PYI044)   # `from __future__ import annotations` has no effect in stub files, since type checkers automatically treat stubs as having those semantics
iter-method-return-iterable                         (PYI045)   # Checks for `__iter__` methods in stubs that return `Iterable[T]` instead of an `Iterator[T]`.
stub-body-multiple-statements                       (PYI048)   # Function body must contain exactly one statement
no-return-argument-annotation-in-stub               (PYI050)   # Prefer `{module}.Never` over `NoReturn` for argument annotations
unannotated-assignment-in-stub                      (PYI052)   # Need type annotation for `{name}`
string-or-bytes-too-long                            (PYI053)   # String and bytes literals longer than 50 characters are not permitted
numeric-literal-too-long                            (PYI054)   # Numeric literals with a string representation longer than ten characters are not permitted
pytest-fixture-incorrect-parentheses-style          (PT001)    # Use `@pytest.fixture{expected}` over `@pytest.fixture{actual}`
pytest-fixture-positional-args                      (PT002)    # Configuration for fixture `{function}` specified via positional args, use kwargs
pytest-extraneous-scope-function                    (PT003)    # `scope='function'` is implied in `@pytest.fixture()`
pytest-missing-fixture-name-underscore              (PT004)    # Fixture `{function}` does not return anything, add leading underscore
pytest-incorrect-fixture-name-underscore            (PT005)    # Fixture `{function}` returns a value, remove leading underscore
pytest-parametrize-names-wrong-type                 (PT006)    # Wrong name(s) type in `@pytest.mark.parametrize`, expected `{expected}`
pytest-parametrize-values-wrong-type                (PT007)    # Wrong values type in `@pytest.mark.parametrize` expected `{values}` of `{row}`
pytest-patch-with-lambda                            (PT008)    # Use `return_value=` instead of patching with `lambda`
pytest-unittest-assertion                           (PT009)    # Use a regular `assert` instead of unittest-style `{assertion}`
pytest-raises-without-exception                     (PT010)    # set the expected exception in `pytest.raises()`
pytest-raises-too-broad                             (PT011)    # `pytest.raises({exception})` is too broad, set the `match` parameter or use a more specific exception
pytest-raises-with-multiple-statements              (PT012)    # `pytest.raises()` block should contain a single simple statement
pytest-incorrect-pytest-import                      (PT013)    # Found incorrect import of pytest, use simple `import pytest` instead
pytest-assert-always-false                          (PT015)    # Assertion always fails, replace with `pytest.fail()`
pytest-fail-without-message                         (PT016)    # No message passed to `pytest.fail()`
pytest-assert-in-except                             (PT017)    # Found assertion on exception `{name}` in `except` block, use `pytest.raises()` instead
pytest-composite-assertion                          (PT018)    # Checks for assertions that combine multiple independent conditions.
pytest-fixture-param-without-value                  (PT019)    # Fixture `{name}` without value is injected as parameter, use `@pytest.mark.usefixtures` instead
pytest-deprecated-yield-fixture                     (PT020)    # `@pytest.yield_fixture` is deprecated, use `@pytest.fixture`
pytest-fixture-finalizer-callback                   (PT021)    # Use `yield` instead of `request.addfinalizer`
pytest-useless-yield-fixture                        (PT022)    # No teardown in fixture `{name}`, use `return` instead of `yield`
pytest-incorrect-mark-parentheses-style             (PT023)    # Use `@pytest.mark.{mark_name}{expected_parens}` over `@pytest.mark.{mark_name}{actual_parens}`
pytest-unnecessary-asyncio-mark-on-fixture          (PT024)    # `pytest.mark.asyncio` is unnecessary for fixtures
pytest-erroneous-use-fixtures-on-fixture            (PT025)    # `pytest.mark.usefixtures` has no effect on fixtures
pytest-use-fixtures-without-parameters              (PT026)    # Useless `pytest.mark.usefixtures` without parameters
bad-quotes-inline-string                            (Q000)     # Checks for inline strings that use single quotes or double quotes, depending on the value of the [`flake8-quotes.inline-quotes`] option.
bad-quotes-multiline-string                         (Q001)     # Checks for multiline strings that use single quotes or double quotes, depending on the value of the [`flake8-quotes.multiline-quotes`]
bad-quotes-docstring                                (Q002)     # Checks for docstrings that use single quotes or double quotes, depending on the value of the [`flake8-quotes.docstring-quotes`] setting.
avoidable-escaped-quote                             (Q003)     # Checks for strings that include escaped quotes, and suggests changing the quote style to avoid the need to escape them.
unnecessary-paren-on-raise-exception                (RSE102)   # Checks for unnecessary parentheses on raised exceptions.
unnecessary-return-none                             (RET501)   # Checks for the presence of a `return None` statement when `None` is the only possible return value.
implicit-return-value                               (RET502)   # Checks for the presence of a `return` statement with no explicit value, for functions that return non-`None` values elsewhere.
implicit-return                                     (RET503)   # Checks for missing explicit `return` statements at the end of functions that can return non-`None` values.
unnecessary-assign                                  (RET504)   # Checks for variable assignments that immediately precede a `return` of the assigned variable.
superfluous-else-return                             (RET505)   # Checks for `else` statements with a `return` statement in the preceding `if` block.
superfluous-else-raise                              (RET506)   # Checks for `else` statements with a `raise` statement in the preceding `if` block.
superfluous-else-continue                           (RET507)   # Checks for `else` statements with a `continue` statement in the preceding `if` block.
superfluous-else-break                              (RET508)   # Checks for `else` statements with a `break` statement in the preceding `if` block.
private-member-access                               (SLF001)   # Checks for accesses on "private" class members.
duplicate-isinstance-call                           (SIM101)   # Checks for multiple `isinstance` calls on the same target.
collapsible-if                                      (SIM102)   # Checks for nested `if` statements that can be collapsed into a single `if` statement.
needless-bool                                       (SIM103)   # Checks for `if` statements that can be replaced with `bool`.
suppressible-exception                              (SIM105)   # Checks for `try`-`except`-`pass` blocks that can be replaced with the `contextlib.suppress` context manager.
return-in-try-except-finally                        (SIM107)   # Checks for `return` statements in `try`-`except` and `finally` blocks.
if-else-block-instead-of-if-exp                     (SIM108)   # Check for `if`-`else`-blocks that can be replaced with a ternary operator.
compare-with-tuple                                  (SIM109)   # Checks for boolean expressions that contain multiple equality comparisons to the same value.
reimplemented-builtin                               (SIM110)   # Checks for `for` loops that can be replaced with a builtin function, like `any` or `all`.
uncapitalized-environment-variables                 (SIM112)   # Check for environment variables that are not capitalized.
if-with-same-arms                                   (SIM114)   # Checks for `if` branches with identical arm bodies.
open-file-with-context-handler                      (SIM115)   # Checks for uses of the builtin `open()` function without an associated context manager.
if-else-block-instead-of-dict-lookup                (SIM116)   # Checks for three or more consecutive if-statements with direct returns
multiple-with-statements                            (SIM117)   # Checks for the unnecessary nesting of multiple consecutive context managers.
in-dict-keys                                        (SIM118)   # Checks for key-existence checks against `dict.keys()` calls.
negate-equal-op                                     (SIM201)   # Checks for negated `==` operators.
negate-not-equal-op                                 (SIM202)   # Checks for negated `!=` operators.
double-negation                                     (SIM208)   # Checks for double negations (i.e., multiple `not` operators).
if-expr-with-true-false                             (SIM210)   # Checks for `if` expressions that can be replaced with `bool()` calls.
if-expr-with-false-true                             (SIM211)   # Checks for `if` expressions that can be replaced by negating a given condition.
if-expr-with-twisted-arms                           (SIM212)   # Checks for `if` expressions that check against a negated condition.
expr-and-not-expr                                   (SIM220)   # Checks for `and` expressions that include both an expression and its negation.
expr-or-not-expr                                    (SIM221)   # Checks for `or` expressions that include both an expression and its negation.
expr-or-true                                        (SIM222)   # Checks for `or` expressions that contain truthy values.
expr-and-false                                      (SIM223)   # Checks for `and` expressions that contain falsey values.
yoda-conditions                                     (SIM300)   # Checks for conditions that position a constant on the left-hand side of the comparison operator, rather than the right-hand side.
if-else-block-instead-of-dict-get                   (SIM401)   # Checks for `if` statements that can be replaced with `dict.get` calls.
dict-get-with-none-default                          (SIM910)   # Check for `dict.get()` calls that pass `None` as the default value.
no-slots-in-str-subclass                            (SLOT000)  # Checks for subclasses of `str` that lack a `__slots__` definition.
no-slots-in-tuple-subclass                          (SLOT001)  # Checks for subclasses of `tuple` that lack a `__slots__` definition.
no-slots-in-namedtuple-subclass                     (SLOT002)  # Checks for subclasses of `collections.namedtuple` that lack a `__slots__` definition.
banned-api                                          (TID251)   # Checks for banned imports.
relative-imports                                    (TID252)   # Checks for relative imports.
invalid-todo-tag                                    (TD001)    # Checks that a TODO comment is labelled with "TODO".
missing-todo-author                                 (TD002)    # Checks that a TODO comment includes an author.
missing-todo-link                                   (TD003)    # Checks that a TODO comment is associated with a link to a relevant issue or ticket.
missing-todo-colon                                  (TD004)    # Checks that a "TODO" tag is followed by a colon.
missing-todo-description                            (TD005)    # Checks that a "TODO" tag contains a description of the issue following the tag itself.
invalid-todo-capitalization                         (TD006)    # Checks that a "TODO" tag is properly capitalized (i.e., that the tag is uppercase).
missing-space-after-todo-colon                      (TD007)    # Checks that the colon after a "TODO" tag is followed by a space.
typing-only-first-party-import                      (TCH001)   # Checks for first-party imports that are only used for type annotations, but aren't defined in a type-checking block.
typing-only-third-party-import                      (TCH002)   # Checks for third-party imports that are only used for type annotations, but aren't defined in a type-checking block.
typing-only-standard-library-import                 (TCH003)   # Checks for standard library imports that are only used for type annotations, but aren't defined in a type-checking block.
runtime-import-in-type-checking-block               (TCH004)   # Checks for runtime imports defined in a type-checking block.
empty-type-checking-block                           (TCH005)   # Checks for an empty type-checking block.
unused-function-argument                            (ARG001)   # Checks for the presence of unused arguments in function definitions.
unused-method-argument                              (ARG002)   # Checks for the presence of unused arguments in instance method definitions.
unused-class-method-argument                        (ARG003)   # Checks for the presence of unused arguments in class method definitions.
unused-static-method-argument                       (ARG004)   # Checks for the presence of unused arguments in static method definitions.
unused-lambda-argument                              (ARG005)   # Checks for the presence of unused arguments in lambda expression definitions.
os-path-abspath                                     (PTH100)   # Checks for uses of `os.path.abspath`.
os-chmod                                            (PTH101)   # Checks for uses of `os.chmod`.
os-mkdir                                            (PTH102)   # Checks for uses of `os.mkdir`.
os-makedirs                                         (PTH103)   # Checks for uses of `os.makedirs`.
os-rename                                           (PTH104)   # Checks for uses of `os.rename`.
os-replace                                          (PTH105)   # Checks for uses of `os.replace`.
os-rmdir                                            (PTH106)   # Checks for uses of `os.rmdir`.
os-remove                                           (PTH107)   # Checks for uses of `os.remove`.
os-unlink                                           (PTH108)   # Checks for uses of `os.unlink`.
os-getcwd                                           (PTH109)   # Checks for uses of `os.getcwd` and `os.getcwdb`.
os-path-exists                                      (PTH110)   # Checks for uses of `os.path.exists`.
os-path-expanduser                                  (PTH111)   # Checks for uses of `os.path.expanduser`.
os-path-isdir                                       (PTH112)   # Checks for uses of `os.path.isdir`.
os-path-isfile                                      (PTH113)   # Checks for uses of `os.path.isfile`.
os-path-islink                                      (PTH114)   # Checks for uses of `os.path.islink`.
os-readlink                                         (PTH115)   # Checks for uses of `os.readlink`.
os-stat                                             (PTH116)   # Checks for uses of `os.stat`.
os-path-isabs                                       (PTH117)   # Checks for uses of `os.path.isabs`.
os-path-join                                        (PTH118)   # Checks for uses of `os.path.join`.
os-path-basename                                    (PTH119)   # Checks for uses of `os.path.basename`.
os-path-dirname                                     (PTH120)   # Checks for uses of `os.path.dirname`.
os-path-samefile                                    (PTH121)   # Checks for uses of `os.path.samefile`.
os-path-splitext                                    (PTH122)   # Checks for uses of `os.path.splitext`.
builtin-open                                        (PTH123)   # Checks for uses of the `open` builtin.
py-path                                             (PTH124)   # Checks for uses of the `py.path` library.
path-constructor-current-directory                  (PTH201)   # Checks for `pathlib.Path` objects that are initialized with the current
os-path-getsize                                     (PTH202)   # Checks for uses of `os.path.getsize`.
os-path-getatime                                    (PTH203)   # Checks for uses of `os.path.getatime`.
os-path-getmtime                                    (PTH204)   # Checks for uses of `os.path.getatime`.
os-path-getctime                                    (PTH205)   # Checks for uses of `os.path.getatime`.
unsorted-imports                                    (I001)     # De-duplicates, groups, and sorts imports based on the provided `isort` settings.
missing-required-import                             (I002)     # Adds any required imports, as specified by the user, to the top of the
complex-structure                                   (C901)     # Checks for functions with a high `McCabe` complexity.
numpy-deprecated-type-alias                         (NPY001)   # Checks for deprecated NumPy type aliases.
numpy-legacy-random                                 (NPY002)   # Checks for the use of legacy `np.random` function calls.
numpy-deprecated-function                           (NPY003)   # Checks for uses of deprecated NumPy functions.
invalid-class-name                                  (N801)     # Checks for class names that do not follow the `CamelCase` convention.
invalid-function-name                               (N802)     # Checks for functions names that do not follow the `snake_case` naming
invalid-argument-name                               (N803)     # Checks for argument names that do not follow the `snake_case` convention.
invalid-first-argument-name-for-class-method        (N804)     # Checks for class methods that use a name other than `cls` for their
invalid-first-argument-name-for-method              (N805)     # Checks for instance methods that use a name other than `self` for their
non-lowercase-variable-in-function                  (N806)     # Checks for the use of non-lowercase variable names in functions.
dunder-function-name                                (N807)     # Checks for functions with "dunder" names (that is, names with two
constant-imported-as-non-constant                   (N811)     # Checks for constant imports that are aliased to non-constant-style
lowercase-imported-as-non-lowercase                 (N812)     # Checks for lowercase imports that are aliased to non-lowercase names.
camelcase-imported-as-lowercase                     (N813)     # Checks for `CamelCase` imports that are aliased to lowercase names.
camelcase-imported-as-constant                      (N814)     # Checks for `CamelCase` imports that are aliased to constant-style names.
mixed-case-variable-in-class-scope                  (N815)     # Checks for class variable names that follow the `mixedCase` convention.
mixed-case-variable-in-global-scope                 (N816)     # Checks for global variable names that follow the `mixedCase` convention.
camelcase-imported-as-acronym                       (N817)     # Checks for `CamelCase` imports that are aliased as acronyms.
error-suffix-on-exception-name                      (N818)     # Checks for custom exception definitions that omit the `Error` suffix.
invalid-module-name                                 (N999)     # Checks for module names that do not follow the `snake_case` naming
pandas-use-of-inplace-argument                      (PD002)    # Checks for `inplace=True` usages in `pandas` function and method
pandas-use-of-dot-is-null                           (PD003)    # Checks for uses of `.isnull` on Pandas objects.
pandas-use-of-dot-not-null                          (PD004)    # Checks for uses of `.notnull` on Pandas objects.
pandas-use-of-dot-ix                                (PD007)    # Checks for uses of `.ix` on Pandas objects.
pandas-use-of-dot-at                                (PD008)    # Checks for uses of `.at` on Pandas objects.
pandas-use-of-dot-iat                               (PD009)    # Checks for uses of `.iat` on Pandas objects.
pandas-use-of-dot-pivot-or-unstack                  (PD010)    # Checks for uses of `.pivot` or `.unstack` on Pandas objects.
pandas-use-of-dot-values                            (PD011)    # Checks for uses of `.values` on Pandas Series and Index objects.
pandas-use-of-dot-read-table                        (PD012)    # Checks for uses of `pd.read_table` to read CSV files.
pandas-use-of-dot-stack                             (PD013)    # Checks for uses of `.stack` on Pandas objects.
pandas-use-of-pd-merge                              (PD015)    # Checks for uses of `pd.merge` on Pandas objects.
pandas-nunique-constant-series-check                (PD101)    # Check for uses of `.nunique()` to check if a Pandas Series is constant
pandas-df-variable-name                             (PD901)    # Checks for assignments to the variable `df`.
unnecessary-list-cast                               (PERF101)  # Checks for explicit casts to `list` on for-loop iterables.
incorrect-dict-iterator                             (PERF102)  # Checks for uses of `dict.items()` that discard either the key or the value
try-except-in-loop                                  (PERF203)  # Checks for uses of except handling via `try`-`except` within `for` and
manual-list-comprehension                           (PERF401)  # Checks for `for` loops that can be replaced by a list comprehension.
manual-list-copy                                    (PERF402)  # Checks for `for` loops that can be replaced by a making a copy of a list.
mixed-spaces-and-tabs                               (E101)     # Checks for mixed tabs and spaces in indentation.
indentation-with-invalid-multiple                   (E111)     # Checks for indentation with a non-multiple of 4 spaces.
no-indented-block                                   (E112)     # Checks for indented blocks that are lacking indentation.
unexpected-indentation                              (E113)     # Checks for unexpected indentation.
indentation-with-invalid-multiple-comment           (E114)     # Checks for indentation of comments with a non-multiple of 4 spaces.
no-indented-block-comment                           (E115)     # Checks for comments in a code blocks that are lacking indentation.
unexpected-indentation-comment                      (E116)     # Checks for unexpected indentation of comment.
over-indented                                       (E117)     # Checks for over-indented code.
whitespace-after-open-bracket                       (E201)     # Checks for the use of extraneous whitespace after "(".
whitespace-before-close-bracket                     (E202)     # Checks for the use of extraneous whitespace before ")".
whitespace-before-punctuation                       (E203)     # Checks for the use of extraneous whitespace before ",", ";" or ":".
multiple-spaces-before-operator                     (E221)     # Checks for extraneous whitespace before an operator.
multiple-spaces-after-operator                      (E222)     # Checks for extraneous whitespace after an operator.
tab-before-operator                                 (E223)     # Checks for extraneous tabs before an operator.
tab-after-operator                                  (E224)     # Checks for extraneous tabs after an operator.
too-few-spaces-before-inline-comment                (E261)     # Checks if inline comments are separated by at least two spaces.
no-space-after-inline-comment                       (E262)     # Checks if one space is used after inline comments.
no-space-after-block-comment                        (E265)     # Checks if one space is used after block comments.
multiple-leading-hashes-for-block-comment           (E266)     # Checks if block comments start with a single "#".
multiple-spaces-after-keyword                       (E271)     # Checks for extraneous whitespace after keywords.
multiple-spaces-before-keyword                      (E272)     # Checks for extraneous whitespace before keywords.
tab-after-keyword                                   (E273)     # Checks for extraneous tabs after keywords.
tab-before-keyword                                  (E274)     # Checks for extraneous tabs before keywords.
multiple-imports-on-one-line                        (E401)     # Check for multiple imports on one line.
module-import-not-at-top-of-file                    (E402)     # Checks for imports that are not at the top of the file.
line-too-long                                       (E501)     # Checks for lines that exceed the specified maximum character length.
multiple-statements-on-one-line-colon               (E701)     # Checks for compound statements (multiple statements on the same line).
multiple-statements-on-one-line-semicolon           (E702)     # Checks for multiline statements on one line.
useless-semicolon                                   (E703)     # Checks for statements that end with an unnecessary semicolon.
none-comparison                                     (E711)     # Checks for comparisons to `None` which are not using the `is` operator.
true-false-comparison                               (E712)     # Checks for comparisons to booleans which are not using the `is` operator.
not-in-test                                         (E713)     # Checks for negative comparison using `not {foo} in {bar}`.
not-is-test                                         (E714)     # Checks for negative comparison using `not {foo} is {bar}`.
type-comparison                                     (E721)     # Checks for object type comparisons without using isinstance().
bare-except                                         (E722)     # Checks for bare `except` catches in `try`-`except` statements.
lambda-assignment                                   (E731)     # Checks for lambda expressions which are assigned to a variable.
ambiguous-variable-name                             (E741)     # Checks for the use of the characters 'l', 'O', or 'I' as variable names.
ambiguous-class-name                                (E742)     # Checks for the use of the characters 'l', 'O', or 'I' as class names.
ambiguous-function-name                             (E743)     # Checks for the use of the characters 'l', 'O', or 'I' as function names.
trailing-whitespace                                 (W291)     # Checks for superfluous trailing whitespace.
missing-newline-at-end-of-file                      (W292)     # Checks for files missing a new line at the end of the file.
blank-line-with-whitespace                          (W293)     # Checks for superfluous whitespace in blank lines.
doc-line-too-long                                   (W505)     # Checks for doc lines that exceed the specified maximum character length.
invalid-escape-sequence                             (W605)     # Checks for invalid escape sequences.
undocumented-public-module                          (D100)     # Checks for undocumented public module definitions.
undocumented-public-class                           (D101)     # Checks for undocumented public class definitions.
undocumented-public-method                          (D102)     # Checks for undocumented public method definitions.
undocumented-public-function                        (D103)     # Checks for undocumented public function definitions.
undocumented-public-package                         (D104)     # Checks for undocumented public package definitions.
undocumented-magic-method                           (D105)     # Checks for undocumented magic method definitions.
undocumented-public-nested-class                    (D106)     # Checks for undocumented public class definitions, for nested classes.
undocumented-public-init                            (D107)     # Checks for public `__init__` method definitions that are missing
fits-on-one-line                                    (D200)     # Checks for single-line docstrings that are broken across multiple lines.
no-blank-line-before-function                       (D201)     # Checks for docstrings on functions that are separated by one or more blank
no-blank-line-after-function                        (D202)     # Checks for docstrings on functions that are separated by one or more blank
one-blank-line-before-class                         (D203)     # Checks for docstrings on class definitions that are not preceded by a
one-blank-line-after-class                          (D204)     # Checks for class methods that are not separated from the class's docstring
blank-line-after-summary                            (D205)     # Checks for docstring summary lines that are not separated from the docstring
indent-with-spaces                                  (D206)     # Checks for docstrings that are indented with tabs.
under-indentation                                   (D207)     # Checks for under-indented docstrings.
over-indentation                                    (D208)     # Checks for over-indented docstrings.
new-line-after-last-paragraph                       (D209)     # Checks for multi-line docstrings whose closing quotes are not on their
surrounding-whitespace                              (D210)     # Checks for surrounding whitespace in docstrings.
blank-line-before-class                             (D211)     # Checks for docstrings on class definitions that are preceded by a blank
multi-line-summary-first-line                       (D212)     # Checks for docstring summary lines that are not positioned on the first
multi-line-summary-second-line                      (D213)     # Checks for docstring summary lines that are not positioned on the second
section-not-over-indented                           (D214)     # Checks for over-indented sections in docstrings.
section-underline-not-over-indented                 (D215)     # Checks for over-indented section underlines in docstrings.
triple-single-quotes                                (D300)     # Checks for docstrings that use `'''triple single quotes'''` instead of
escape-sequence-in-docstring                        (D301)     # Checks for docstrings that include backslashes, but are not defined as
ends-in-period                                      (D400)     # Checks for docstrings in which the first line does not end in a period.
non-imperative-mood                                 (D401)     # Checks for docstring first lines that are not in an imperative mood.
no-signature                                        (D402)     # Checks for function docstrings that include the function's signature in
first-line-capitalized                              (D403)     # Checks for docstrings that do not start with a capital letter.
docstring-starts-with-this                          (D404)     # Checks for docstrings that start with `This`.
capitalize-section-name                             (D405)     # Checks for section headers in docstrings that do not begin with capital
new-line-after-section-name                         (D406)     # Checks that section headers in docstrings that are not followed by a
dashed-underline-after-section                      (D407)     # Checks for section headers in docstrings that are not followed by
section-underline-after-name                        (D408)     # Checks for section underlines in docstrings that are not on the line
section-underline-matches-section-length            (D409)     # Checks for section underlines in docstrings that do not match the length of
no-blank-line-after-section                         (D410)     # Checks for docstring sections that are not separated by a single blank
no-blank-line-before-section                        (D411)     # Checks for docstring sections that are separated by a blank line.
blank-lines-between-header-and-content              (D412)     # Checks for docstring sections that contain blank lines between the section
blank-line-after-last-section                       (D413)     # Checks for missing blank lines after the last section of a multi-line
empty-docstring-section                             (D414)     # Checks for docstrings that contain empty sections.
ends-in-punctuation                                 (D415)     # Checks for docstrings in which the first line does not end in a punctuation
section-name-ends-in-colon                          (D416)     # Checks for docstring section headers that do not end with a colon.
undocumented-param                                  (D417)     # Checks for function docstrings that do not include documentation for all
overload-with-docstring                             (D418)     # Checks for `@overload` function definitions that contain a docstring.
empty-docstring                                     (D419)     # Checks for empty docstrings.
unused-import                                       (F401)     # Checks for unused imports.
import-shadowed-by-loop-var                         (F402)     # Checks for import bindings that are shadowed by loop variables.
undefined-local-with-import-star                    (F403)     # Checks for the use of wildcard imports.
late-future-import                                  (F404)     # Checks for `__future__` imports that are not located at the beginning of a
undefined-local-with-import-star-usage              (F405)     # Checks for names that might be undefined, but may also be defined in a
undefined-local-with-nested-import-star-usage       (F406)     # Check for the use of wildcard imports outside of the module namespace.
future-feature-not-defined                          (F407)     # Checks for `__future__` imports that are not defined in the current Python
percent-format-invalid-format                       (F501)     # Checks for invalid `printf`-style format strings.
percent-format-expected-mapping                     (F502)     # Checks for named placeholders in `printf`-style format strings without
percent-format-expected-sequence                    (F503)     # Checks for uses of mapping-type values in `printf`-style format strings
percent-format-extra-named-arguments                (F504)     # Checks for unused mapping keys in `printf`-style format strings.
percent-format-missing-argument                     (F505)     # Checks for named placeholders in `printf`-style format strings that are not
percent-format-mixed-positional-and-named           (F506)     # Checks for `printf`-style format strings that have mixed positional and
percent-format-positional-count-mismatch            (F507)     # Checks for `printf`-style format strings that have a mismatch between the
percent-format-star-requires-sequence               (F508)     # Checks for `printf`-style format strings that use the `*` specifier with
percent-format-unsupported-format-character         (F509)     # Checks for `printf`-style format strings with invalid format characters.
string-dot-format-invalid-format                    (F521)     # Checks for `str.format` calls with invalid format strings.
string-dot-format-extra-named-arguments             (F522)     # Checks for `str.format` calls with unused keyword arguments.
string-dot-format-extra-positional-arguments        (F523)     # Checks for `str.format` calls with unused positional arguments.
string-dot-format-missing-arguments                 (F524)     # Checks for `str.format` calls with placeholders that are missing arguments.
string-dot-format-mixing-automatic                  (F525)     # Checks for `str.format` calls that mix automatic and manual numbering.
f-string-missing-placeholders                       (F541)     # Checks for f-strings that do not contain any placeholder expressions.
multi-value-repeated-key-literal                    (F601)     # Checks for dictionary literals that associate multiple values with the
multi-value-repeated-key-variable                   (F602)     # Checks for dictionary keys that are repeated with different values.
expressions-in-star-assignment                      (F621)     # Checks for the use of too many expressions in starred assignment statements.
multiple-starred-expressions                        (F622)     # Checks for the use of multiple starred expressions in assignment statements.
assert-tuple                                        (F631)     # Checks for `assert` statements that use non-empty tuples as test
is-literal                                          (F632)     # Checks for `is` and `is not` comparisons against constant literals, like
invalid-print-syntax                                (F633)     # Checks for `print` statements that use the `>>` syntax.
if-tuple                                            (F634)     # Checks for `if statements that use non-empty tuples as test conditions.
break-outside-loop                                  (F701)     # Checks for `break` statements outside of loops.
continue-outside-loop                               (F702)     # Checks for `continue` statements outside of loops.
yield-outside-function                              (F704)     # Checks for `yield` and `yield from` statements outside of functions.
return-outside-function                             (F706)     # Checks for `return` statements outside of functions.
default-except-not-last                             (F707)     # Checks for `except` blocks that handle all exceptions, but are not the last
forward-annotation-syntax-error                     (F722)     # Checks for forward annotations that include invalid syntax.
redefined-while-unused                              (F811)     # Checks for variable definitions that redefine (or "shadow") unused
undefined-name                                      (F821)     # Checks for uses of undefined names.
undefined-export                                    (F822)     # Checks for undefined names in `__all__`.
undefined-local                                     (F823)     # Checks for undefined local variables.
unused-variable                                     (F841)     # Checks for the presence of unused variables in function scopes.
unused-annotation                                   (F842)     # Checks for local variables that are annotated but never used.
raise-not-implemented                               (F901)     # Checks for `raise` statements that raise `NotImplemented`.
eval                                                (PGH001)   # Checks for uses of the builtin `eval()` function.
deprecated-log-warn                                 (PGH002)   # Check for usages of the deprecated `warn` method from the `logging` module.
blanket-type-ignore                                 (PGH003)   # Check for `type: ignore` annotations that suppress all type warnings, as
blanket-noqa                                        (PGH004)   # Check for `noqa` annotations that suppress all diagnostics, as opposed to
invalid-mock-access                                 (PGH005)   # Checks for common mistakes when using mock objects.
type-name-incorrect-variance                        (PLC0105)  # Checks for type names that do not match the variance of their associated
type-bivariance                                     (PLC0131)  # Checks for `TypeVar` and `ParamSpec` definitions in which the type is
type-param-name-mismatch                            (PLC0132)  # Checks for `TypeVar`, `TypeVarTuple`, `ParamSpec`, and `NewType`
single-string-slots                                 (PLC0205)  # Checks for single strings assigned to `__slots__`.
iteration-over-set                                  (PLC0208)  # Checks for iterations over `set` literals.
useless-import-alias                                (PLC0414)  # Checks for import aliases that do not rename the original package.
compare-to-empty-string                             (PLC1901)  # Checks for comparisons to empty strings.
unnecessary-direct-lambda-call                      (PLC3002)  # Checks for unnecessary direct calls to lambda expressions.
yield-in-init                                       (PLE0100)  # Checks for `__init__` methods that are turned into generators by the
return-in-init                                      (PLE0101)  # Checks for `__init__` methods that return values.
continue-in-finally                                 (PLE0116)  # Checks for `continue` statements inside `finally`
nonlocal-without-binding                            (PLE0117)  # Checks for `nonlocal` names without bindings.
load-before-global-declaration                      (PLE0118)  # Checks for uses of names that are declared as `global` prior to the
duplicate-bases                                     (PLE0241)  # Checks for duplicate base classes in class definitions.
unexpected-special-method-signature                 (PLE0302)  # Checks for "special" methods that have an unexpected method signature.
invalid-str-return-type                             (PLE0307)  # Checks for `__str__` implementations that return a type other than `str`.
invalid-all-object                                  (PLE0604)  # Checks for the inclusion of invalid objects in `__all__`.
invalid-all-format                                  (PLE0605)  # Checks for invalid assignments to `__all__`.
await-outside-async                                 (PLE1142)  # Checks for uses of `await` outside of `async` functions.
logging-too-many-args                               (PLE1205)  # Checks for too many positional arguments for a `logging` format string.
logging-too-few-args                                (PLE1206)  # Checks for too few positional arguments for a `logging` format string.
bad-string-format-type                              (PLE1307)  # Checks for mismatched argument types in "old-style" format strings.
bad-str-strip-call                                  (PLE1310)  # Checks duplicate characters in `str#strip` calls.
invalid-envvar-value                                (PLE1507)  # Checks for `os.getenv` calls with an invalid `key` argument.
yield-from-in-async-function                        (PLE1700)  # Checks for uses of `yield from` in async functions.
bidirectional-unicode                               (PLE2502)  # Checks for bidirectional unicode characters.
invalid-character-backspace                         (PLE2510)  # Checks for strings that contain the control character `BS`.
invalid-character-sub                               (PLE2512)  # Checks for strings that contain the raw control character `SUB`.
invalid-character-esc                               (PLE2513)  # Checks for strings that contain the raw control character `ESC`.
invalid-character-nul                               (PLE2514)  # Checks for strings that contain the raw control character `NUL` (0 byte).
invalid-character-zero-width-space                  (PLE2515)  # Checks for strings that contain the zero width space character.
comparison-with-itself                              (PLR0124)  # Checks for operations that compare a name to itself.
comparison-of-constant                              (PLR0133)  # Checks for comparisons between constants.
property-with-parameters                            (PLR0206)  # Checks for property definitions that accept function parameters.
manual-from-import                                  (PLR0402)  # Checks for submodule imports that are aliased to the submodule name.
too-many-return-statements                          (PLR0911)  # Checks for functions or methods with too many return statements.
too-many-branches                                   (PLR0912)  # Checks for functions or methods with too many branches.
too-many-arguments                                  (PLR0913)  # Checks for function definitions that include too many arguments.
too-many-statements                                 (PLR0915)  # Checks for functions or methods with too many statements.
repeated-isinstance-calls                           (PLR1701)  # Checks for repeated `isinstance` calls on the same object.
useless-return                                      (PLR1711)  # Checks for functions that end with an unnecessary `return` or
repeated-equality-comparison-target                 (PLR1714)  # Checks for repeated equality comparisons that can rewritten as a membership
sys-exit-alias                                      (PLR1722)  # Checks for uses of the `exit()` and `quit()`.
magic-value-comparison                              (PLR2004)  # Checks for the use of unnamed numerical constants ("magic") values in
collapsible-else-if                                 (PLR5501)  # Checks for `else` blocks that consist of a single `if` statement.
useless-else-on-loop                                (PLW0120)  # Checks for `else` clauses on loops without a `break` statement.
assert-on-string-literal                            (PLW0129)  # Checks for `assert` statements that use a string literal as the first
named-expr-without-context                          (PLW0131)  # Checks for uses of named expressions (e.g., `a := 42`) that can be
import-self                                         (PLW0406)  # Checks for import statements that import the current module.
global-variable-not-assigned                        (PLW0602)  # Checks for `global` variables that are not assigned a value in the current
global-statement                                    (PLW0603)  # Checks for the use of `global` statements to update identifiers.
binary-op-exception                                 (PLW0711)  # Checks for `except` clauses that attempt to catch multiple
invalid-envvar-default                              (PLW1508)  # Checks for `env.getenv` calls with invalid default values.
redefined-loop-name                                 (PLW2901)  # Checks for variables defined in `for` loops and `with` statements that
nested-min-max                                      (PLW3301)  # Checks for nested `min` and `max` calls.
useless-metaclass-type                              (UP001)    # Checks for the use of `__metaclass__ = type` in class definitions.
type-of-primitive                                   (UP003)    # Checks for uses of `type` that take a primitive as an argument.
useless-object-inheritance                          (UP004)    # Checks for classes that inherit from `object`.
deprecated-unittest-alias                           (UP005)    # Checks for uses of deprecated methods from the `unittest` module.
non-pep585-annotation                               (UP006)    # Checks for the use of generics that can be replaced with standard library
non-pep604-annotation                               (UP007)    # Check for type annotations that can be rewritten based on [PEP 604] syntax.
super-call-with-parameters                          (UP008)    # Checks for `super` calls that pass redundant arguments.
utf8-encoding-declaration                           (UP009)    # Checks for unnecessary UTF-8 encoding declarations.
unnecessary-future-import                           (UP010)    # Checks for unnecessary `__future__` imports.
lru-cache-without-parameters                        (UP011)    # Checks for unnecessary parentheses on `functools.lru_cache` decorators.
unnecessary-encode-utf8                             (UP012)    # Checks for unnecessary calls to `encode` as UTF-8.
convert-typed-dict-functional-to-class              (UP013)    # Checks for `TypedDict` declarations that use functional syntax.
convert-named-tuple-functional-to-class             (UP014)    # Checks for `NamedTuple` declarations that use functional syntax.
redundant-open-modes                                (UP015)    # Checks for redundant `open` mode parameters.
datetime-timezone-utc                               (UP017)    # Checks for uses of `datetime.timezone.utc`.
native-literals                                     (UP018)    # Checks for unnecessary calls to `str` and `bytes`.
typing-text-str-alias                               (UP019)    # Checks for uses of `typing.Text`.
open-alias                                          (UP020)    # Checks for uses of `io.open`.
replace-universal-newlines                          (UP021)    # Checks for uses of `subprocess.run` that set the `universal_newlines`
replace-stdout-stderr                               (UP022)    # Checks for uses of `subprocess.run` that send `stdout` and `stderr` to a
deprecated-c-element-tree                           (UP023)    # Checks for uses of the `xml.etree.cElementTree` module.
os-error-alias                                      (UP024)    # Checks for uses of exceptions that alias `OSError`.
unicode-kind-prefix                                 (UP025)    # Checks for uses of the Unicode kind prefix (`u`) in strings.
deprecated-mock-import                              (UP026)    # Checks for imports of the `mock` module that should be replaced with
unpacked-list-comprehension                         (UP027)    # Checks for list comprehensions that are immediately unpacked.
yield-in-for-loop                                   (UP028)    # Checks for `for` loops that can be replaced with `yield from` expressions.
unnecessary-builtin-import                          (UP029)    # Checks for unnecessary imports of builtins.
format-literals                                     (UP030)    # Checks for unnecessary positional indices in format strings.
printf-string-formatting                            (UP031)    # Checks for `printf`-style string formatting.
f-string                                            (UP032)    # Checks for `str#format` calls that can be replaced with f-strings.
lru-cache-with-maxsize-none                         (UP033)    # Checks for uses of `functools.lru_cache` that set `maxsize=None`.
extraneous-parentheses                              (UP034)    # Checks for extraneous parentheses.
deprecated-import                                   (UP035)    # Checks for uses of deprecated imports based on the minimum supported
outdated-version-block                              (UP036)    # Checks for conditional blocks gated on `sys.version_info` comparisons
quoted-annotation                                   (UP037)    # Checks for the presence of unnecessary quotes in type annotations.
non-pep604-isinstance                               (UP038)    # Checks for uses of `isinstance` and `issubclass` that take a tuple
unnecessary-class-parentheses                       (UP039)    # Checks for class definitions that include unnecessary parentheses after
ambiguous-unicode-character-string                  (RUF001)   # Checks for ambiguous unicode characters in strings.
ambiguous-unicode-character-docstring               (RUF002)   # Checks for ambiguous unicode characters in docstrings.
ambiguous-unicode-character-comment                 (RUF003)   # Checks for ambiguous unicode characters in comments.
collection-literal-concatenation                    (RUF005)   # Checks for uses of the `+` operator to concatenate collections.
asyncio-dangling-task                               (RUF006)   # Checks for `asyncio.create_task` and `asyncio.ensure_future` calls
pairwise-over-zipped                                (RUF007)   # Checks for use of `zip()` to iterate over successive pairs of elements.
mutable-dataclass-default                           (RUF008)   # Checks for mutable default values in dataclass attributes.
function-call-in-dataclass-default-argument         (RUF009)   # Checks for function calls in dataclass attribute defaults.
explicit-f-string-type-conversion                   (RUF010)   # Checks for uses of `str()`, `repr()`, and `ascii()` as explicit type
static-key-dict-comprehension                       (RUF011)   # Checks for dictionary comprehensions that use a static key, like a string
mutable-class-default                               (RUF012)   # Checks for mutable default values in class attributes.
implicit-optional                                   (RUF013)   # Checks for the use of implicit `Optional` in type annotations when the
unnecessary-iterable-allocation-for-first-element   (RUF015)   # Checks for uses of `list(...)[0]` that can be replaced with
invalid-index-type                                  (RUF016)   # Checks for indexed access to lists, strings, tuples, bytes, and comprehensions
unused-noqa                                         (RUF100)   # Checks for `noqa` directives that are no longer applicable.
invalid-pyproject-toml                              (RUF200)   # Checks for any pyproject.toml that does not conform to the schema from the relevant PEPs.
raise-vanilla-class                                 (TRY002)   # Checks for code that raises `Exception` directly.
raise-vanilla-args                                  (TRY003)   # Checks for long exception messages that are not defined in the exception
type-check-without-type-error                       (TRY004)   # Checks for type checks that do not raise `TypeError`.
reraise-no-cause                                    (TRY200)   # Checks for exceptions that are re-raised without specifying the cause via
verbose-raise                                       (TRY201)   # Checks for needless exception names in `raise` statements.
try-consider-else                                   (TRY300)   # Checks for `return` statements in `try` blocks.
raise-within-try                                    (TRY301)   # Checks for `raise` statements within `try` blocks. The only `raise`s
useless-try-except                                  (TRY302)   # Checks for immediate uses of `raise` within exception handlers.
error-instead-of-exception                          (TRY400)   # Checks for uses of `logging.error` instead of `logging.exception` when
verbose-log-message                                 (TRY401)   # Checks for excessive logging of exception objects.

static-join-to-f-string                             (FLY002)   # Consider `{expr}` instead of string join
whitespace-before-parameters                        (E211)     # Whitespace before '{bracket}'
missing-whitespace-around-operator                  (E225)     # Missing whitespace around operator
missing-whitespace-around-arithmetic-operator       (E226)     # Missing whitespace around arithmetic operator
missing-whitespace-around-bitwise-or-shift-operator (E227)     # Missing whitespace around bitwise or shift operator
missing-whitespace-around-modulo-operator           (E228)     # Missing whitespace around modulo operator
missing-whitespace                                  (E231)     # Missing whitespace after '{token}'
unexpected-spaces-around-keyword-parameter-equals   (E251)     # Unexpected spaces around keyword / parameter equals
missing-whitespace-around-parameter-equals          (E252)     # Missing whitespace around parameter equals
missing-whitespace-after-keyword                    (E275)     # Missing whitespace after keyword
syntax-error                                        (E999)     # SyntaxError: {message}
tab-indentation                                     (W191)     # Indentation contains tabs
debugger                                            (T100)     #
django-nullable-model-string-field                  (DJ001)    #
django-locals-in-render-function                    (DJ003)    #
django-exclude-with-model-form                      (DJ006)    #
django-all-with-model-form                          (DJ007)    #
django-model-without-dunder-str                     (DJ008)    #
django-unordered-body-content-in-model              (DJ012)    #
django-non-leading-receiver-decorator               (DJ013)    #
paramiko-call                                       (S601)     #
subprocess-popen-with-shell-equals-true             (S602)     #
subprocess-without-shell-equals-true                (S603)     #
call-with-shell-equals-true                         (S604)     #
start-process-with-a-shell                          (S605)     #
start-process-with-no-shell                         (S606)     #
start-process-with-partial-path                     (S607)     #
call-datetime-without-tzinfo                        (DTZ001)   # The use of `datetime.datetime()` without `tzinfo` argument is not allowed
call-datetime-today                                 (DTZ002)   # The use of `datetime.datetime.today()` is not allowed, use `datetime.datetime.now(tz=)` instead
call-datetime-utcnow                                (DTZ003)   #
call-datetime-utcfromtimestamp                      (DTZ004)   #
call-datetime-now-without-tzinfo                    (DTZ005)   #
call-datetime-fromtimestamp                         (DTZ006)   #
call-datetime-strptime-without-zone                 (DTZ007)   #
call-date-today                                     (DTZ011)   #
io-error                                            (E902)     #
