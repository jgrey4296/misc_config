Coq Syntax:
forall {vars}, {type}                                     #
fun {vars} => {term}                                      #
Fixpoint {fix} with {def}                                 # Recursive function
CoFixpoint {def} with {def}                               # Corecursive function
let {name} : {type} := {term} in {term}                   #
let fix {decl} in {term}                                  # Recursive let
{term} : {type}                                           # type cast
{term} <: type                                            # virtual machine checked type cast
{term} <<: {type}                                         # ocaml checked type cast

Definition {ident} {body}                                 # Extend global environment
Example    {ident} {body}                                 #

Record {ident} : {sort}    := { [field ;] }               # Data structures
Class {ident}              := { [field ; ] }              # Typeclass
Inductive {ident} {params} := [ | {ident} : {type} ]      # Recursive
Variant {ident}            := {constructor}               # Non-recursive

match {term} return {term} with [{pattern} => {term}] end #

Section {ident}                                           # Open Section.
End {ident}                                               # Close Section.

Module {Import | Export} {ident} # Module definition
Include {module} # Importing in interactive module.
Import {module}. # Import module.
Export {categories} # Exporting
