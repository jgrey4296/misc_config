Coq Tactics:
Proof                                                                              # Enter Proof mode.
Proof Using                                                                        # Enter Proof Mode with section variables.
Qed                                                                                # Exit Proof Mode with all goals completed.
Admitted                                                                           # Exit Proof Mode with incomplete goals.
Default Proof Mode                                                                 # Noedit, Classic, Ltac2...
Proof Mode                                                                         # Noedit, Classic, Ltac2...

Goal                                                                               # Command
Save                                                                               # Command
Defined                                                                            # Command
Abort                                                                              # Command
Fail                                                                               #
Succeed                                                                            #
Undo                                                                               # Command. Go Back a command.
Restart                                                                            # Command. Restore to original goal.
Unfocused                                                                          # Command. Succeed if there are no more goals.
Focus {ID}                                                                         # Focus on a goal. Or: ID { ... }
shelve                                                                             # Pause goal and don't display in proof state.
shelve_unifiable                                                                   # Shelve goals that are mentioned in other goals.
Unshelve                                                                           # Add all shelved goals back into focus.
unshelve {tactic}                                                                  # Perform tactic, then unshelve existential variables added to the shelve by that tactic.
admit                                                                              # Skip goal.
give_up                                                                            # Skip goal.
cycle                                                                              # Reorder goals.
swap                                                                               # Exchange two goals position in proof state.
all: revgoals                                                                      # Reverse the order of goals.

abstract {tactic} using {name}                                                     # Separate out a subproof into a separate lemma to solve.
transparent_abstract {tactic} using {name}                                         # Separate out a transparent subproof into a separate lemma to solve.

Show {goal?}                                                                       # Display current goal or all goals
Show Proof                                                                         # Show the current proof term.
Show Conjectures                                                                   # Name all theorems being proved. (such as abstracted lemmas)
Show Intro                                                                         # Simulate naming process of 'intros'
Show Intros                                                                        # Simulate naming process of 'intros'
Show Existentials                                                                  # Display all open goals / existential variables.
Show Match {type}                                                                  # Display match paths for a type.
Show Universes                                                                     # Display universe constraints.
Show Goal {goal} at {state}                                                        # Display a goal at a specific position
Guarded                                                                            # Check recursive conditions aren't violated.

Optimize Proof                                                                     #
Optimize Heap                                                                      #

exact {term}                                                                       #
assumption                                                                         #
simple refine {term}                                                               #
{simple?} apply {term}                                                             #
{simple?} eapply {term}                                                            # apply and create existential variables
rapply {term}                                                                      # apply with refinement of created existential variables.

hnf {occurrences}                                                                  # reduce goal to its head normal form
intro {ident} {where}                                                              # Add variables and definitions to context using hnf.
intros {pattern}                                                                   #
intros until {ident}                                                               # intro until a dependent premise is added.
eintros {pattern}                                                                  # intro existential variables

clear {ident?}                                                                     # Remove unneeded hypotheses from context.
revert {ident}                                                                     # inverse of intro. Move hypotheses and definitions from context into the goal.
move {ident} {where}                                                               # Reorder hypotheses in context. Where = [at top, at bottom, before {ident}, after {ident}]
rename {ident} into {ident}                                                        # rename hypothesis in context. (*Not* in proof term)
set {alias ident} {ident} {occurrences?}                                           # Create an alias for context term
eset {alias ident} {ident} {occrences?}                                            # Alias with existential variables

remember {term} {ident?}                                                           #
pose {term} {ident?}                                                               # add alias to context without any replacement.

assert {ident}                                                                     # Add new hypothesis and matching subgoal before current
assert {ident} by {tactic}                                                         # Add new hypothesis, try to prove with tactic.
eassert {ident}                                                                    # new hypothesis with existential variables / holes
enough {ident} by {tactic}                                                         # Add new hypothesis and matching subgoal *after* current
eenough {ident} by {tactic}                                                        # new hypothesis with existential varaibles / holes.

cut {type}                                                                         # Modus Ponens
specialize {term} {with bindings?}                                                 # Apply arguments to a term.
generalize {goal}                                                                  # generalize goal to ∀x:T, goal'
evar {ident : type}                                                                # create fresh existential variable
instantiate {ident := term}                                                        # refine specific term.
absurd {type}                                                                      # False elimination. generates subgoals ~P and P.
contradiction {term}                                                               # prove by finding a contradiction.
contradict {ident}                                                                 # Transform hypothesis and goal into negation. eg: ~A |- B  -> |- A.
exfalse                                                                            # elimtype False. Add goal to prove False is provable.

classical_left                                                                     # Prove Left hand of disjunction, assuming Right is negated. Require Import Classical.
classical_right                                                                    # Prove Right hand of disjunction, assuming Left is negated. Require Import Classical.


reflexivity                                                                        # Checks Definitional equality.
symmetry {occurrences}                                                             # Swaps t = u to u = t
transitivity {term}                                                                # ∀{term}, t = u -> G1: t = {term}, G2: u = {term}
f_equal                                                                            # Subgoal Function application checking. f(a,b) = g(c,d) -> G1:f=g, G2:a=c, G3:b=d
rewrite <- {occrrences} by {tactic}                                                # Replace terms in left with equal terms from right
rewrite -> {occrrences} by {tactic}                                                # Replace terms in right with equal terms from left
rewrite   {-> | <-} {occurrences} {count}                                          # int, ?=(0+), !=(1+)
rewrite * {-> | <-} {term} in {ident}                                              #
replace {-> | <-} {term} {occurrences}                                             # replace free occurrences
replace {term} with {term} {occurrences} by {tactic}                               # replace free occurrences
subst {ident}                                                                      # replace idents with their local definition
substitute {-> | <-}                                                               # replace idents with their local definition
simple stubst                                                                      #
stepl {term} by {tactic}                                                           # chain rewrite steps, assuming relation R {term1} {term2}. Apply tactic to left.
stepr {term} by {tactic}                                                           # chain rewrite steps, assuming relation R {term1} {term2}. Apply tactic to right
change {term} with {term} {occurrents}                                             # replace terms with definitionally equivalent/reducible terms

lazy {reduction} {occurrences}                                                     # Weak-head normal form reduction. Call by need. {beta | delta {ref} | match | fix | cofix | iota | zeta }    Reduction.
cbv  {reduction} {occurrences}                                                     # Weak-head normal form reduction. Call by value. {beta | delta {ref} | match | fix | cofix | iota | zeta }   Reduction.
simpl {delta} {pattern} {occurrences}                                              # Limited Reduction.                                                                                          Reduction.
cbn                                                                                # Call by name reduction. Faster than simpl.                                                                  Reduction.
hnf {occurrences}                                                                  # Reduce goal to weak head normal form, without recursion.                                                    Reduction.
red                                                                                # Reduce Application                                                                                          Reduction.
unfold {occurrences}                                                               # delta reduction                                                                                             Reduction.
fold {term} {occurrences}                                                          # reduce term, replace occurrences of the result with the term.                                               Reduction.
pattern {pattern} {occurrences}                                                    # generate goal through beta-expansion pattern matching                                                       Reduction.
vm_compute                                                                         # brute force normalization and comparison of terms.                                                          Reduction.
native_compute                                                                     # converts to ocaml. Has overhead, but can be 2-5 times faster.                                               Reduction.
eval {reduction} in {term}                                                         # Apply conversion rules, don't change proof state.
Eval {reduction} in {term}                                                         # Displays result and its type.

Declare Reduction {ident} = {reduction}                                            # alias reduction strategy.
Opaque {constant}                                                                  # Mark constant as unable to be unfolded..
Transparent {constant}                                                             # Mark constant as unfoldable. (Proofs ending in QED are always opaque).
Strategy {opaque | int | expand | transparent} {reference}                         # Set unfolding priority.
with strategy {level} {reference} {tactice}                                        #

constructor {int | var} with {bindings}                                            # repeat intro; hnf. Then apply constructors.
split with {bindings}                                                              #
exists {bindings}                                                                  #
left with {bindings}                                                               #
right with {bindings}                                                              #

destruct {clause} {principle}                                                      # Case Analysis using induction. Generates subgoals for each type constructor.
case {clause} {principle}                                                          # Case Analysis without recursion.
simple destruct {ident}                                                            #
dependent destruction {ident} generalizing {ident} using {term}                    #
decompose {term}                                                                   # recursively decompose proposition
decompose sum {term}                                                               # decompose sum types.
decompose record {term}                                                            # decompose record types.

induction {clause} {principle}                                                     # generate subgoals for each constructor of type. Generates induction hypothesis as well.
fix {ident} {int} with {idents}                                                    #
cofix {ident} with {idents}                                                        #

discriminate {arg}                                                                 # Prove structural equality
injection {arg}                                                                    # Prove using injectiveness. ie: C t1 = C t2 -> t1 = t2
simplify_eq {arg}                                                                  # prove equality using discriminate or injection
inversion {ident} using {term}                                                     # Create new goals for each constructor that isn't self-contradictory.
inversion_sigma {ident} as {pattern}                                               # Turns "existT P x p = existT P y q" into pairs of equalities "H: x = y" + "rew H in p = q"

Scheme {ident} := {Induction | Minimality | Elimination | Case }                   # Generate induction principles.

from Coq Require Import ssreflect ssrfun ssrbool.                                  # SSReflect Setup
Set Implicit Arguments. Unset Strict Arguments. Unset Printing Implicit Defensive. # SSReflect Setup
