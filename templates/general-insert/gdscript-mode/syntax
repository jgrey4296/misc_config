GDScript Syntax:
class_name {name}                      # Explicit/Internal class
extends "res://{path_base}.gd"         # Inheritance

@{ident}({vars})                       # annotation
@onready var {ident} = {val}           # var set on entering scene tree.

func _init():                          # constructor

var {ident} : {type} = {value}         # member variables
const {ident} = {value}                # constants
enum {ident} { {values} }              # enums

print({val})                           # printing

func {ident}( {vars} ):                # function / method / lambda
static func {ident}({vars}):           # Static method
return {var}                           # function return
super({vars})                          # superclass call
self                                   # current instance

call_deferred("{func}", {args})        # delayed calling

if {cmp}:                              # IF
elif {cmp}:                            # IF
else:                                  # IF

for {var} in {iter}:                   # iteration
while {cmp}:                           # loop

match {var}:                           # match statement
{constant val}: {expr}                 # match case, constant
{var/enum}: {expr}                     # match case, variable
_ : {expr}                             # match case, wildcard
var {var}: {expr}                      # match case, binding
[]: {expr}                             # match case, empty array.
[{val}, {val}]: {expr}                 # match case, array literal
[var start, _,]: {expr}                # match case, array bind, wildcard
[{val}, ...]: {expr}                   # match case, array, open ended
{}: {expr}                             # match case, dict, empty.
{"{val}": "{val}"}: {expr}             # match case, dict, literal
{ "{val}": var {var} }: {expr}         # match case, dict, binding


breakpoint                             # debugging
assert({cmp})                          # debugging
print_debug({val})                     # debugging
print_stack()                          # debugging
get_stack()                            # debugging. get call stack

inst_to_dict({obj})                    # serialization

PI                                     # constant
TAU                                    # constant
INF                                    # constant
NAN                                    # constant


{var} is {type}                        # Type checking
is_instance_of({val}, {val})           # Type checking, non-constant
{var} as {type}                        # Type Casting
x in y                                 # list checking
x not in y                             # list checking
len({list})                            # list length
range(...)                             # list value range

get_node("{val}")                      # get sub node, or ${name}, or get_node("%{unique}")
add_child({obj})                       # add node as child of current

load("{file}")                         # load
preload("{file}")                      # load at script parse time.
{class}.new()                          # object creation

signal {name}({vars})                  # signal declaration
{obj}.{signal}.connect({callable})     # signal connect

{obj}.free()                           # decrement objects memory count.
{obj}.queue_free()                     # decrement objects memory count next frame.
weakref({obj})                         # non-reference counted object.


get_tree()                             # Get the scene tree
get_tree().paused = true               # pause
get_tree.change_scene_to_file({scene}) # Scene changing
{scene}.instantiate()                  # create a scene

_iter_init                             # custom iterator
_iter_next                             # custom iterator
_iter_get                              # custom iterator
