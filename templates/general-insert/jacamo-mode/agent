JaCaMo Agent syntax (ASL Files):
                                                     # Variables Uppercase
                                                     # end statements with "."
{ include("$file") }                                 # import
@{name}                                              # plan name (annotate line above head). Disambiguates plans with same head.
@{name}[atomic]                                      # atomic plan, wont be interleaved with other intentions.
{goal} : {conditions} <- {terms | subgoals}.         # plan. actions separated by ";", finished by "."
{term} :- {terms}.                                   # inference rule.

+!{term}                                             # achievement goal. "When I have the goal {term}". Declarative. term is true when plan completes. HEAD.
-!{term}                                             # achievement retraction goal
+?{term}                                             # test goal definition.                                                                           HEAD.
+{term}                                              # belief assertion event. "When I Believe {term}".                                                HEAD.
-{term}                                              # beleif retraction event.                                                                        HEAD.

?{term}                                              # test goal performance. retrieve from belief base during plan. BODY
!{term}                                              # create subgoal.                                               BODY
{term}({args})[{annotations}]                        # term assertion.                                               BODY
-{term}                                              # term retraction.                                              BODY
println({msg})                                       # basic io                                                      BODY

artifact({name}, {template}, {id})                   # artifact terms as part of workspace.                          BODY


{term} & {term}                                      # conjunction
not {term}                                           # negation

workspace                                            # predefined artifact. creates, searches, and manages artifacts.
console                                              # predfined artifact for std io.

makeArtifact("{name}", "{template"}, {params}, {id}) # artifact creation. id is a feedback param.
disposeArtifact({id})                                # artifact destruction
lookupArtifact("{name}", {id})                       # artifact retrieval.
linkArtifacts({id}, {id}, {port})                    # artifact -> artifact connection
{artifactAction}({params})[artifact_id[{id})]        # artifact targeted action
focus({id})                                          # agent -> artifact connection
stopFocus({id})                                      # agent -> artifact disconnect

createWorkspace("{/parent/path/newName}")            # workspace creation. paths can be absolute or relative.
removeWorkspace("{workspace/path}")                  # workspace disposal
linkWorkspaces("{workspace}", "{workspace}", {name}) # workspace -> workspace connection
joinWorkspace("{/workspace/path}", {id})             # agent -> workspace connection
quitWorkspace({id})                                  # agent -> workspace disconnection

artifact_name("{name}")                              # annotation. artifact action
artifact_id({id})                                    # annotation. artifact action
workspace({id})                                      # annotation. workspace action
source({agent})                                      # annotation. agent information came from
