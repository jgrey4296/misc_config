Jason Stdlib:

at                               #  add a future event.
wait                             #  wait some event.
create_agent                     #  create a new agent.
save_agent                       #  store the beliefs and plans into a file.
create_agent                     #  create a new agent.
kill_agent                       #  kill an agent.
clone                            #  clone an agent.
stopMAS                          #  stop all agents.
version                          #  gets the Jason version.
date                             #  get the current date.
time                             #  get the current time.
fail                             #  an action that always fails.
perceive                         #  force perception.
range                            #  backtrack values in a range (used in for).
random                           #  produces random numbers.
math.set_random_seed             #  sets the seed of Jason's random number generator.
include                          #  imports a source code at run time.
printf                           #  formated print.


atom                             # check whether an argument is an atom (p).
structure                        # check whether an argument is a structure (p(t1,t2), [a,b]).
literal                          # check whether an argument is a literal (p(t1,t2), ~p(t1,t2), p(t1,t2)[a1,a2]).
list                             # check whether an argument is a list ([a,b]).
ground                           # check whether an argument is ground.
number                           # check whether an argument is a number (1, 2.3).
string                           # check whether an argument is a string ("s").
type                             # gets the type of a term.
add_nested_source                # add a source in a literal.
eval                             # evaluates a logical expression.

if                               # implementation of if.
while                            # implementation of while.
for                              # implementation of for.

length                           # size of strings.
concat                           # append strings.
delete                           # delete characters of a string.
reverse                          # reverse strings.
nth                              # nth element of a string.
substring                        # test substrings of strings.
string                           # check whether an argument is a string.
suffix                           # suffixes of a string.
prefix                           # prefixes of a string.
term2string                      # convert terms to strings and vice-versa.
lower_case                       # lower case strings.
upper_case                       # upper case strings.
replace                          # replace strings.
.map.create(M)                   #  M = {}
.map.put(M,a,10)                 #  M = {a->10}
.map.put(M,b,ok)                 #  M = {a->10, b->ok}
.map.put(M,a,20)                 #  M = {a->20, b->ok}
.length(M,X)                     #  X = 2
.type(M,T)                       #  T = map
.map.key(M,a)                    #  true
.map.key(M,V)                    #  unifies V with all keys of M
.map.value(M,10)                 #  true
.map.value(M,V)                  #  unifies V with all values of M
.findall(K, .map.key(M,K), LL)   #  LL = [a,b]
.findall(V, .map.value(M,V), LL) #  LL = [20,ok]
.findall([K,V], .map.key(M,K)    # & .map.get(M,K,V), LL)
.map.get(M,a,V)                  #  V = 20
.map.get(M,c,V)                  #  fail
.map.get(M,c,V,0)                #  V = 0
.map.remove(M,a,V)               #  M = {b->ok} V = 20
.map.clear(M)                    #  M = {}

.queue.create(Q)                 #  Q = []
.queue.add(Q,a)                  #  Q = [a]
.queue.add(Q,b)                  #  Q = [a, b]
.queue.add_all(Q,[c,d,e])        #  Q = [a, b, c, d, e]
.queue.head(Q,H)                 #  H = a
.queue.remove(Q,H)               #  H = a, Q = [b, c, d, e]
.length(Q,X)                     #  X = 4
.type(Q,T)                       #  T = queue
.queue.clear(Q)                  #

.queue.create(Q,priority)        #  Q = [] queue with priority (the queue is kept sorted)
.queue.add(Q,d)                  #  Q = [d]
.queue.add(Q,c)                  #  Q = [c, d]
.queue.add_all(Q,[b,d,a])        #  Q = [a, b, c, d, e]
.queue.head(Q,H)                 #  H = a

.set.create(S)                   #  S = {}
.set.add(S,a)                    #  S = {a}
.set.add_all(S,[5,b,p(2),a])     #  S = {5,a,b,p(2)}
.set.remove(S,b)                 #  S = {5,a,p(2)}
.set.union(S,[a,1])              #  S = {1,5,a,p(2)}
.length(S,X)                     #  X = 4
.type(S,T)                       #  T = set
.set.difference(S,[1,a])         #  S = {5,p(2)}
.findall(K, .member(K,S), LL)    # LL = [5,p(2)]
.set.add(S,5)                    #
.set.intersection(S,V)           #  S = {5}
.set.clear(S)                    #  S = {}

send                             #  send messages.
broadcast                        #  broadcast messages.
my_name                          #  get the agent's name.
all_names                        #  get the names of all agents in the system.
df_register                      #  register a service in the Directory Facilitator.
df_deregister                    #  removes a service in the Directory Facilitator.
df_search                        #  search for a service in the Directory Facilitator.
df_subscribe                     #  subscribe for new providers of a service in the Directory Facilitator.

add_plan                         #  add new plans.
remove_plan                      #  remove a plan.
plan_label                       #  get the label of a plan.
relevant_plans                   #  get a list of plans.
relevant_plan                    #  backtracking based version of .relevant_plans.
list_plans                       #  print out the plans in the current plan library.

abolish                          #  removes some beliefs.
belief                           #  consults some beliefs.
findall                          #  finds all answers for a query.
setof                            #  finds a set of answers for a query.
count                            #  counts the number of solutions of some query.
namespace                        #  checks whether the argument is a name space.
relevant_rules                   #  gets a list of rules.
list_rules                       #  prints out the rules in the current belief base.

desire                           #  check agent's desires.
drop_desire                      #  remove one agent's desire.
drop_all_desires                 #  remove agent's desires.
intend                           #  check agent's intentions.
drop_intention                   #  remove one agent's intention.
drop_all_intentions              #  remove all agent's intentions.
intention                        #  get details of the state of Jason intentions.
succeed_goal                     #  abort some goal with success.
fail_goal                        #  abort some goal with failure.
drop_event                       #  remove one event.
drop_all_events                  #  remove events in the interpreter.
suspend                          #  suspend intentions.
resume                           #  resume suspended intentions.
suspended                        #  check agent's suspended goals.
