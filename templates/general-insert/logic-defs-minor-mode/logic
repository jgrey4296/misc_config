Logic Definitions:

Self-referential definition.                                                                                             #  Impredicativity.                                                                                                       Classical Logic.
P ⊢ Q                                                                                                                    #  Syntactic Entailment. Q derivable from P using the rules of a system S, independent of truth assignments.              Classical Logic.
P ⊨ Q                                                                                                                    #  Semantic Entailment.  Q derivable from P using the rules of a system S if there *not* a model I where P ∈ I and Q ∉ I. Classical Logic.
(⊢) ⇒ (⊨).                                                                                                               #  Sound.                                                                                                                 Classical Logic.
(⊨) ⇒ (⊢).                                                                                                               #  Complete.                                                                                                              Classical Logic.

There exists a model which is true.                                                                                      #  Satisfiability.                                                                                                        Classical Logic.
Every model is true.                                                                                                     #  Validity.                                                                                                              Classical Logic.
Expressions do not lead to a contradiction.                                                                              #  Consistency.                                                                                                           Classical Logic.
A procedure exists for computing the answer of an expression in finite time.                                             #  Decidability.                                                                                                          Classical Logic.

Q only when P.                                                                                                           #  Necessary.                                                                                                             Classical Logic.
P therefore Q.                                                                                                           #  Sufficient.                                                                                                            Classical Logic.

(P → Q) ⩭ ¬P ∨ Q.                                                                                                        #  conditional. Material Implication.                                                                                     Classical Logic.
P ⇔ Q ⇒ P → Q and Q → P                                                                                                  #  biconditional. Material Equivalence.                                                                                   Classical Logic.

TODO                                                                                                                     # well formed formulas.                                                                                                   Classical Logic.
TODO                                                                                                                     # Term.                                                                                                                   Classical Logic.
TODO                                                                                                                     # Signature.                                                                                                              Classical Logic.
TODO                                                                                                                     # Hoare Triple.                                                                                                           Classical Logic.
TODO                                                                                                                     # model.                                                                                                                  Classical Logic.
TODO                                                                                                                     # valuation.                                                                                                              Classical Logic.
TODO                                                                                                                     # Bisimulation.                                                                                                           Classical Logic.
TODO                                                                                                                     # Sequent.                                                                                                                Classical Logic.
TODO                                                                                                                     # compactness property.                                                                                                   Classical Logic.
TODO                                                                                                                     # first-order correspondence language.                                                                                    Classical Logic.
using second order logic (relations over quantifiers) replaces existential variables by functions on universal variables # skolemization.                                                                                                          Classical Logic.

TODO                                                                                                                     # Kripke Model. Modal Logic.
□A = ~◇~A                                                                                                                # TODO          Modal Logic.

Set of theorms does not change when a rule is added to the system.                                                       # Admissable / Redundancy.                                               Inference Rules.

Statements can be true without proof.                                                                                    # Open World Assumption.                                                 Inference Rules.
Only proven statements are true.                                                                                         # Closed World Assumption.                                               Inference Rules.

(P → Q), P ⊢ Q.                                                                                                          # modus ponens. Affirming the antecedent.                                Inference Rules.
(P → Q), ¬Q ⊢ ¬P.                                                                                                        # modus tollens. Denying the consequent.                                 Inference Rules.
P → Q becomes  ¬Q → ¬P                                                                                                   # Modulus Tollens. contraposition. Inverting Antecedent and Consequence. Inference Rules.
P → Q becomes  ¬P → ¬Q                                                                                                   # inversion.                                                             Inference Rules.
P → Q becomes   Q →  P                                                                                                   # conversion.                                                            Inference Rules.
P → Q becomes ¬(P → Q)                                                                                                   # complement.                                                            Inference Rules.

P → (Q → R) ⩭ (P ∧ Q) → R                                                                                                # import-export.                                                         Inference Rules.

P ∨ ¬P                                                                                                                   # law of excluded middle.                                                Inference Rules.
¬¬P ⇒ P.                                                                                                                 # double negation elimination.                                           Inference Rules.

not (A ∨ B) = (not A) ∧ (not B).                                                                                         # De Morgan's Laws 1.
not (A ∧ B) = (not A) ∨ (not B).                                                                                         # De Morgan's Laws 2.

                                                                                                                         # Strengthening.                                                   Structural Rules.
(A ⊢ X) ⇒ (A, B ⊢ X), (A ⊢ X, Y)                                                                                         # Weakening. Addition does not change the truth of the expression. Structural Rules.
(A, A, A ⊢ X) ⩭ (A ⊢ X) and  (A ⊢ X, X, X) ⩭ (A ⊢ X).                                                                    # Contraction. Idempotence of entailment.                          Structural Rules.
(A, B ⊢ X) ⩭ (B, A ⊢ X) and (A ⊢ X, Y) ⩭ (A ⊢ Y, X)                                                                      # Exchange. Permutation.                                           Structural Rules.
(Γ ⊢ A, Δ) and (Γ', A ⊢ Δ') ⩭ (Γ, Γ' ⊢ Δ, Δ')                                                                            # Cut. Generalisation of Modus Ponens.                             Structural Rules.

(P → Q),  Q ⊢ P.                                                                                                         # Affirming the consequent. Fallacy.
(P → Q), ¬P ⊢ ¬Q.                                                                                                        # Denying the antecedent.   Fallacy.

α                                                                                                                        # Syntactically equal ignoring bound (internal) variable names.                   Conversion Rules.
β                                                                                                                        # Eliminates application. Reduction with global env of (λx.T)u -> T{x -> u}.      Conversion Rules.
δ                                                                                                                        # Replace variables or constants with definition. (only 'transparent' constants). Conversion Rules.
ζ                                                                                                                        # Eliminate 'let' expressions. Removes the declaration entirely, unlike δ.        Conversion Rules.
η                                                                                                                        # Expand forall statements into fresh variable lambdas. ∀x:T, U with λx:T.(t x).  Conversion Rules.

TODO                                                                                                                     # Hilbert Semantics
TODO                                                                                                                     # Tarski Semantics
TODO                                                                                                                     # Operational Sematics.
TODO                                                                                                                     # Structural Operational Semantics.
TODO                                                                                                                     # Denotational Semantics.
TODO                                                                                                                     # Axiomatic Semantics.

Variable                                                                                                                 # A *variable* is a string of characters starting with an uppercase letter, e.g. A, B, and C.
Function                                                                                                                 # A *function* symbol is a string of characters starting with a lowercase letter.
Predicate                                                                                                                # A *predicate* symbol is a string of characters starting with a lowercase letter, e.g. job or happy. The arity n of a function or predicate symbol p is the number of arguments it takes and is denoted as p/n, e.g. happy/1, head/2, and append/3.
Constant                                                                                                                 # A *constant* symbol is a function symbol with zero arity, e.g. alice or bob.
Term                                                                                                                     # A *term* is a variable, or a constant/function symbol of arity n immediately followed by a tuple of n terms.
Ground Term                                                                                                              # A term is *ground* if it contains no variables.
Atom                                                                                                                     # An *atom* is a formula p(t1, . . . , tn), where p is a predicate symbol of arity n and each ti is a term, e.g. lego builder(alice), where lego builder is a predicate symbol of arity 1 and alice is a constant symbol.
Ground Atom                                                                                                              # An atom is *ground* if all of its terms are ground, e.g. lego builder(alice) is ground but lego builder(A), where A is a variable, is not ground.
Not                                                                                                                      # The symbol *not* denotes negation as failure, where an atom is false if it cannot be proven true.
Literal                                                                                                                  # A *literal* is an atom A (a positive literal) or its negation not A (a negative literal). For instance, lego builder(alice) is both an atom and a literal but not lego builder(alice) is only a literal because it includes the negation symbol not.
Clause                                                                                                                   # A *clause* is of the form h1, ..., hn :- b1, ...,bm where each hi and bj is a literal and the symbol , denotes conjunction. The symbols hi are called the head of the clause. The symbols bi are called the body of the clause. We sometimes use the name rule instead of clause.
Horn Clause                                                                                                              # A *Horn clause* is a clause with at most one positive literal.
Definite Clause                                                                                                          # A *definite clause* is clause of the form h :- b1, b2, ..., bn, i.e. a clause with only one head literal, e.g. qsort(A,B):- empty(A),empty(B). Informally, a definite clause states that the head is true if the body is true, i.e. all of the body literals are proven true. For instance, the rule happy(A):- lego builder(A),enjoys lego(A) says that happy(A) is true when both lego builder(A) and enjoys lego(A) are true.
Ground Clause                                                                                                            # A clause is *ground* if it contains no variables.
Clausal Theory                                                                                                           # A *clausal theory* is a set of clauses.
Goal                                                                                                                     # A *goal* (also called a constraint) is a clause of the form :- b1, b2, ..., bn, i.e. a clause without a head, e.g. :- head(A,B),head(B,A).
Unit Clause                                                                                                              # A *unit clause* is a clause with no body. For unit clauses, we usually omit the :- symbol, e.g. loves(alice,X).
Fact                                                                                                                     # A *fact* is a ground unit clause loves(andrew,laura).
Substitution                                                                                                             # A *substitution* is a clause with variables v1, . . . , vn simultaneously replaced with terms t1, . . . , tn and is denoted as θ = {v1/t1, . . . , vn/tn}. For instance, applying the substitution θ = {A/bob} to loves(alice,A) results in loves(alice,bob).
Substitution                                                                                                             # A substitution *θ* unifies atoms A and B in the case Aθ = Bθ. Note that atoms A and B need to have a distinct set of variables, i.e., they should not have a variable with the same name, for unification to work properly.

(A ∧ B ∧ D) = (A ∧ B ∧ C) ∧ (¬C ∧ D)                                                                                     # Resolution. Production of new clauses from complementary/mutually incompatible literals.

                                                                                                                         # Unification. Bi-directional pattern matching on variables.

Herbrand Base                                                                                                            # Answer Set Programming
Herbrand Universe                                                                                                        # Answer Set Programming
Interpretation                                                                                                           # Answer Set Programming

Minimal Model Semantics                                                                                                  # Answer Set Programming
Fixpoint                                                                                                                 # Answer Set Programming
Stratified Program                                                                                                       # Answer Set Programming
Dependency Graph                                                                                                         # Answer Set Programming
Stable Semantics                                                                                                         # Answer Set Programming
Gelfond-Lifschitz Reduct                                                                                                 # Answer Set Programming

Brave Reasoning                                                                                                          # Answer Set Programming
Cautious Reasoning                                                                                                       # Answer Set Programming

TBox                                                                                                                     # Description Logic
ABox                                                                                                                     # Description Logic

EL                                                                                                                       # Description Logic
ALC                                                                                                                      # Description Logic
SHIQ                                                                                                                     # Description Logic
