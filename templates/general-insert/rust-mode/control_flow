Rust Control Flow:
if x < 2 { code... } else { code... }                                         # If *expression*. End with ; when used with `let`
while n < 100 { ... n += 1; }                                                 # Conditional Loop. `n' needs to be mutable.

for n in 1..101 { ... }                                                       # Iterate over range 1 to 100
for n in 1..=100 { ... }                                                      # Inclusive range.
for n in aVar.iter() { ... }                                                  # impl Iterator for aVar::Type { fn into_iter, iter, iter_mut }

loop { code.. continue; ... break; }                                          # Infinite Loop
'outer: loop { ... 'inner: loop { ... break 'outer; } }                       # Loop Labels
loop { ... break aValue; }                                                    # Return a value from a loop

match aVar { pattern => result, val | val | val => result2, _ => "CatchAll" } # Pattern matching
match aRef { ref value => result, ref mut value => result2... }               # Reference creation for patterns
match aVar { pattern if condition => result ... }                             # Pattern match guards.
match aVar { Some(n @ value) => n, Some(n) => n }                             # Pattern Match Bindings

if let Some(n) = aValue { code... }                                           # Destructuring shorthand
if let Some(n) = aValue { code... } else { code... }                          # Destructuring with failure.
let Some(n) = aValue else { code.. }                                          # Destructuring with failure

while let Some(n) = aVar { code... aVar = ...; }                              # Destructuring loop
