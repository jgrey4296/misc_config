Rust Operators:
!                                          # ident! Macro Expansion
!                                          # !expr.                                                                            fn:Not.
!=                                         # expr != expr. Nonequal Comparison.                                                fn:PartialEq.
%                                          # expr % expr. Remainder.                                                           fn:Rem.
%=                                         # var %= expr. Remainder Assignment.                                                fn:RemAssign.
&                                          # expr & expr. Bitwise AND.                                                         fn:BitAnd.
&                                          # &expr. &mut expr. Borrow.
&                                          # &type, &mut type, &'a type. Borrowed Pointer Type.
&=                                         # var &= expr. Bitwise AND and assignment.                                          fn:BitAndAssign
&&                                         # expr && expr. Short-circuiting logical AND.
*                                          # expr * expr. Arithmetic multiplicationk.                                          fn:Mul
*=                                         # var *= expr. Arithmetic multiplication and assignment.                            fn:MulAssign
*                                          # *expr. Dereference.                                                               fn:Deref
*                                          # *const type, *mut type. Raw pointer.
+                                          # trait + trait, 'a + trait. Compound type constraint.
+                                          # expr + expr. Arithmetic addition.                                                 fn:Add
+=                                         # var += expr. Arithmetic addition and assignment.                                  fn:AddAssign
,                                          # expr, expr. Argument and element separator.
-                                          # - expr. Arithmetic negation.                                                      fn:Neg
-                                          # expr - expr. Arithmetic subtraction.                                              fn:Sub
-=                                         # var -= expr. Arithmetic subtraction and assignment.                               fn:SubAssign
->                                         # fn(...) -> type, |...| -> type. Function and closure return type.
.                                          # expr.ident. Member access.
..                                         # .., expr.., ..expr, expr..expr. Right-exclusive range literal.                    fn:PartialOrd
..=                                        # ..=expr, expr..=expr. Right-inclusive range literal.                              fn:PartialOrd
..                                         # ..expr. Struct literal update syntax.
..                                         # variant(x, ..), struct_type { x, .. }. “And the rest” pattern binding.
...                                        # expr...expr. (Deprecated, use ..= instead) In a pattern: inclusive range pattern.
/                                          # expr / expr. Arithmetic division.                                                 fn:Div
/=                                         # var /= expr. Arithmetic division and assignment.                                  fn:DivAssign
:                                          # pat: type, ident: type. Constraints.
:                                          # ident: expr. Struct field initializer.
:                                          # 'a: loop {...}. Loop label.
;                                          # expr;. Statement and item terminator.
;                                          # [...; len]. Part of fixed-size array syntax.
<<                                         # expr << expr. Left-shift.                                                         fn:Shl
<<=                                        # var <<= expr. Left-shift and assignment.                                          fn:ShlAssign
<                                          # expr < expr. Less than comparison.                                                fn:PartialOrd
<=                                         # expr <= expr. Less than or equal to comparison.                                   fn:PartialOrd
=                                          # var = expr, ident = type. Assignment/equivalence.
==                                         # expr == expr. Equality comparison.                                                fn:PartialEq
=>                                         # pat => expr. Part of match arm syntax.
>                                          # expr > expr. Greater than comparison.                                             fn:PartialOrd
>=                                         # expr >= expr. Greater than or equal to comparison.                                fn:PartialOrd
>>                                         # expr >> expr. Right-shift.                                                        fn:Shr
>>=                                        # var >>= expr. Right-shift and assignment.                                         fn:ShrAssign
@                                          # ident @ pat. Pattern binding.
^                                          # expr ^ expr. Bitwise exclusive OR.                                                fn:BitXor
^=                                         # var ^= expr. Bitwise exclusive OR and assignment.                                 fn:BitXorAssign
|                                          # pat | pat. Pattern alternatives.
|                                          # expr | expr. Bitwise OR.                                                          fn:BitOr
|=                                         # var |= expr. Bitwise OR and assignment.                                           fn:BitOrAssign
||                                         # expr || expr. Short-circuiting logical OR.
?                                          # expr?. Error propagation

'ident                                     # Named lifetime or loop label
...u8, ...i32, ...f64, ...usize, etc.      # Numeric literal of specific type
"..."                                      # String literal
r"...", r#"..."#, r##"..."##, etc.         # Raw string literal, escape characters not processed
b"..."                                     # Byte string literal; constructs an array of bytes instead of a string
br"...", br#"..."#, br##"..."##, etc.      # Raw byte string literal, combination of raw and byte string literal
'...'                                      # Character literal
b'...'                                     # ASCII byte literal
|...| expr                                 # Closure
!                                          # Always empty bottom type for diverging functions
_                                          # “Ignored” pattern binding; also used to make integer literals readable

'ident                                     # Named lifetime or loop label
...u8, ...i32, ...f64, ...usize, etc.      # Numeric literal of specific type
"..."                                      # String literal
r"...", r#"..."#, r##"..."##, etc.         # Raw string literal, escape characters not processed
b"..."                                     # Byte string literal; constructs an array of bytes instead of a string
br"...", br#"..."#, br##"..."##, etc.      # Raw byte string literal, combination of raw and byte string literal
'...'                                      # Character literal
b'...'                                     # ASCII byte literal
|...| expr                                 # Closure
!                                          # Always empty bottom type for diverging functions
_                                          # “Ignored” pattern binding; also used to make integer literals readable

path<...>                                  # Specifies parameters to generic type in a type (e.g., Vec<u8>)
path::<...>, method::<...>                 # Specifies parameters to generic type, function, or method in an expression; often referred to as turbofish (e.g., "42".parse::<i32>())
fn ident<...> ...                          # Define generic function
struct ident<...> ...                      # Define generic structure
enum ident<...> ...                        # Define generic enumeration
impl<...> ...                              # Define generic implementation
for<...> type                              # Higher-ranked lifetime bounds
type<ident=type>                           # A generic type where one or more associated types have specific assignments (e.g., Iterator<Item=T>)

T: U                                       # Generic parameter T constrained to types that implement U
T: 'a                                      # Generic type T must outlive lifetime 'a (meaning the type cannot transitively contain any references with lifetimes shorter than 'a)
T: 'static                                 # Generic type T contains no borrowed references other than 'static ones
'b: 'a                                     # Generic lifetime 'b must outlive lifetime 'a
T: ?Sized                                  # Allow generic type parameter to be a dynamically sized type
'a + trait, trait + trait                  # Compound type constraint

\#[meta]                                   # Outer attribute
#![meta]                                   # Inner attribute
$ident                                     # Macro substitution
$ident:kind                                # Macro capture
$(…)…                                      # Macro repetition
ident!(...), ident!{...}, ident![...]      # Macro invocation

()                                         # Empty tuple (aka unit), both literal and type
(expr)                                     # Parenthesized expression
(expr,)                                    # Single-element tuple expression
(type,)                                    # Single-element tuple type
(expr, ...)                                # Tuple expression
(type, ...)                                # Tuple type
expr(expr, ...)                            # Function call expression; also used to initialize tuple structs and tuple enum variants
expr.0, expr.1, etc.                       # Tuple indexing

{...}                                      # Block expression
Type {...}                                 # struct literal

[...]                                      # Array literal
[expr; len]                                # Array literal containing len copies of expr
[type; len]                                # Array type containing len instances of type
expr[expr]                                 # Collection indexing. Overloadable (Index, IndexMut)
expr[..], expr[a..], expr[..b], expr[a..b] # Collection indexing pretending to be collection slicing, using Range, RangeFrom, RangeTo, or RangeFull as the “index”
