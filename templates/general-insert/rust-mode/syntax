General Rust Syntax:
panic!("Msg")                                                     # Top level fail the program

let aVar = bVar                                                   # pass by value / moving
let aVar = &bVar                                                  # Value Borrow / pass by reference
let aVar = &mut bVar                                              # Mutable Borrow / pass by Mutable Reference
RefType<dyn ATrait>                                               # References that contain a type implemnenting ATrait

let aVar:AType     = aValue;                                      # Variable Declaration
let mut aVar:AType = aValue;                                      # Mutable Declaration
let _aVar:AType    = aValue;                                      # Silenced variable, compiled won't complain about non-use.
let ref aVar:&AType = aValue;                                     # Reference Variable Declaration
let aVar: &'a AType = &AValue;                                    # Lifetime annotation
let aVar: &'static AType = &AValue;                               # Static Lifetime

type aVar = AType;                                                # Type Alias.

fn aName(x:AType, y:AType) -> AType {...}                         # Function Declaration
fn aName(x: impl Trait) -> impl Trait {...}                       # Argument/Return Val Implements a trait
fn aName<'a> (x: &a' AType) {...}                                 # Explicit Lifetime Annotation
fn aName() -> ! {}                                                # Deverging Function, never returns
impl AType { fn AName () { ... } }                                # Method Declaration
|x| -> AType { ... }                                              # Closure Declaration

struct Name(AType, AType);                                        # Tuple Declaration
let (a,b) = aTtuple;                                              # Tuple Destructuring

struct Name { x: AType, y: AType... }                             # Struct Declaration
Name { x: aValue, y: aValue }                                     # Struct init
Name.x                                                            # Struct access

enum Name { Name, Name(AType)... Name{ x:i64, y:i64 } }           # Enum declaration
Name:Name(vals...)                                                # enum init

static Name: AType = aValue;                                      # (unsafe mutable) program lifetime variable.
const  Name: AType = aValue;                                      # Unchangeable variable.

let aVar : [AType, Number] = [values..];                          # Fixed Size Arrays
let aVar : [AType, Number] = [aValue; Number]                     # Initialize all entries to same value
&aVar[Number]                                                     # Array Slice

mem::size_of_val(&var);                                           # Byte size on stack

...;                                                              # Statements end with semicolons
{ ... };                                                          # Blocks are expressions, end with ; for statement.
{ code... }                                                       # Block Creation. Variables are constrained to block scope.
{ code... val }                                                   # Return val
{ code... val; }                                                  # return ()
unsafe {...}                                                      # Unsafe Block. Allow dereferencing raw pointers, unsafe functions/traits, modifying static mutable variables.
#[link(name="m") extern {...}                                     # FFI interface declaration
