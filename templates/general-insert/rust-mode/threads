Rust Threads:
use std::processCommand;
use std::thread;                                                        # Module
thread::spawn(fn);                                                      # Start a thread, returns a reference
aThread.join();                                                         # -> Result<T,E>. Wait for the thread to finish
aThread.join().expect("Err msg");                                       # Handle thread panics.


use std::sync:mpsc::{Sender, Receiver}                                  # Communication Channels between threads.
let (tx, rx): (Sender<T>, Receiver<T>) = mpsc::channel();               # Create the channels.
let thread_tx = tx.clone()                                              # Senders can be copied.
thread_tx.send(val);                                                    # Take ownership of the sender, queue a message.
rx.recv();                                                              # Block, and wait for messages.

let cmd = Command::new("ls")                                            # Build a process
cmd.spawn().wait()                                                      # Start the process and wait for it
Command::new("ls").arg("--la")                                          # Add an argument
let output = Command::new("ls").output()                                # Get a Result<process:Output, Err>
output.unwrap().status.success()                                        #
output.unwrap().stdout                                                  # or .stderr

Command::new("wc").stdin(Stdio::piped()).stdout(Stdio::piped()).spawn() # Pipes into and out
