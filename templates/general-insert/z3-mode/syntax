z3 Syntax:
validity   : F always evaluates to true for any appropriate values.
satisfiable: F evaluates to true for some appropriate values.

(declare-const {} {type})                                                 # Declaration
(declare-fun {} ({args}) {type})                                          # Declaration
(define-sort {} ({type vars}) {structure})                                # Declaration
(declare-datatypes ({type vars}) (({ident} ({constructor} {structure})))) # Declaration
(declare-datatypes () (({} {vals})))                                      # Scalar/Enum

(echo "{text}")
(display {val})                                                           # pretty print


(assert {expr})                                                           # constraint
(assert-soft {expr})                                                      # soft constraint
(simplify {val})                                                          # sovling
(maximize {expr})                                                         # solving
(minimizr {expr})                                                         # solving
(check-sat)                                                               # Solving
(get-model)                                                               # Solving
(get-objectives)                                                          # Solving
(push)                                                                    # Scope
(pop)                                                                     # Scope

(set-option :{option} {val})                                              # Options

(=> {} {})                                                                # Bool proposition
(or {})                                                                   # Bool Proposition
(xor {})                                                                  # Bool Proposition
(not {})                                                                  # Bool Proposition
(ite {} {} {})                                                            # if-then-else
(= {} {})                                                                 # Bi-implication

(to_real {})                                                              # type conversion

(select {var} {int})                                                      # array access
(store {var} {int} {val})                                                 # array insert


Int                                                                       # Type / Sort
Real                                                                      # Type / Sort
String                                                                    # Type / Sort
Bool                                                                      # Type / Sort
BitVec                                                                    # Type / Sort
Array {} {}                                                               # Type / Sort

(help-tactic)                                                             # print built in tactics

(then {tactic} {sugoal})                                                  # tactic combinator
(par-then {tactic} {subgoal})                                             # tactic combinator
(or-else {t} {s})                                                         # tactic combinator
(par-or {t} {s})                                                          # tactic combinator
(repeat {t})                                                              # tactic combinator
(repeat {t} {n})                                                          # tactic combinator
(try-for {t} {ms})                                                        # tactic combinator
(using-params {t} {params})                                               # tactic combinator


(set-option :fixedpoint.engine data)                                      # use datalog
(delcare-rel {name} ())                                                   # datalog relation
(rule {expr})                                                             # datalog rule
(rule {expr} {name})                                                      # datalog named rule
(query {relation} :print-answer true)                                     # data query


(set-logic {logic})                                                       #
QF                                                                        # Theory for the restriction to quantifier free formulas
A                                                                         # Theory or AX for the theory ArraysEx
BV                                                                        # Theory for the theory FixedSizeBitVectors
FP                                                                        # Theory (forthcoming) for the theory FloatingPoint
IA                                                                        # Theory for the theory Ints (Integer Arithmetic)
RA                                                                        # Theory for the theory Reals (Real Arithmetic)
IRA                                                                       # Theory for the theory Reals_Ints (mixed Integer Real Arithmetic)
IDL                                                                       # Theory for Integer Difference Logic
RDL                                                                       # Theory for Rational Difference Logic
L                                                                         # Theory before IA, RA, or IRA for the linear fragment of those arithmetics
N                                                                         # Theory before IA, RA, or IRA for the non-linear fragment of those arithmetics
UF                                                                        # Theory for the extension allowing free sort and function symbols
