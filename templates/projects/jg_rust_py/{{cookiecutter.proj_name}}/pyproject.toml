[project]
name            = "{{cookiecutter.proj_name}}"
version         = "0.0.1"
description     = ""
readme          = "README.md"
requires-python = ">={{cookiecutter.python}}"
license         = {file = "LICENSE"}
keywords        = ["rust"]
authors         = [
  {name  = "J Grey"}
  {email = "jgrey4296@gmail.com"},
]
classifiers     = [
  "Programming Language :: Python"
]

##-- dependencies
dependencies   = []

[project.optional-dependencies]
docs = [ "sphinx" ]
dev  = [ "https://github.com/jgrey4296/doot", "pipreqs" ]
test = [ "pytest < 5.0.0" ]

##-- end dependencies

##-- urls
[project.urls]
homepage      = "https://github.com/{{cookiecutter._github_username}}/{{cookiecutter.proj_name}}"
documentation = "https://readthedocs.org/{{cookiecutter.proj_name}}"
repository    = "https://github.com/{{cookiecutter._github_username}}/{{cookiecutter.proj_name}}"
changelog     = "https://github.com//{{cookiecutter.proj_name}}/blob/master/CHANGELOG.md"

##-- end urls

##-- scripts
[project.scripts]
{{cookiecutter.proj_name}} = "{{cookiecutter.proj_name}}.{{cookiecutter.entry_point}}:main"

[project.gui-scripts]
# spam-gui      = "spam:main_gui"

[project.entry-points."nothing"]
# tomatoes      = "spam:main_tomatoes"

##-- end scripts

##-- build system
[build-system]
requires = [
         "setuptools",
         "wheel"
]

build-backend = "setuptools.build_meta"

[tool.setuptools]
include-package-data = true

[tool.setuptools.packages.find]
where = ["."]

[tool.setuptools.package-data]
"{{cookiecutter.proj_name}}.__configs" = []
"{{cookiecutter.proj_name}}.__data"    = ["*.so"]

[tool.setuptools.exclude-package-data]

##-- end build system

##-- pyright
[tool.pyright]
# strict = {{cookiecutter.proj_name}}.*
verboseOutput               = true
typeCheckingMode            = "strict"
pythonVersion               = "{{cookiecutter.python}}"

reportUnusedImport          = false
reportAssertAlwaysTrue      = "information"
reportMissingParameterType  = "warning"
reportMissingTypeArgument   = "warning"
reportMissingTypeStubs      = "warning"
reportUnknownMemberType     = "warning"
reportUnknownParameterType  = "information"
reportUnknownVariableType   = "warning"
reportUnnecessaryCast       = "information"
reportUnnecessaryIsInstance = "warning"

##-- end pyright

##-- mypy
# https://mypy.readthedocs.io/en/stable/config_file.html#config-file
[mypy]
python_version      = {{cookiecutter.python}}
warn_return_any     = true
warn_unused_configs = true

# Per-module options:
[mypy-pyparsing]
ignore_missing_imports = true

##-- end mypy

##-- pytest
[tool.pytest.ini_options]
log_cli       = false
log_level     = "DEBUG"
log_cli_level = "DEBUG"

##-- end pytest

##-- sphinx
[tool.sphinx]
author     = "{{cookiecutter._author}}"
copyright  = "{% now 'utc' %}"
extensions = ['sphinx.ext.doctest', 'sphinx.ext.autodoc', 'sphinx.ext.autosummary', 'sphinx.ext.napoleon']
templates  = ['_templates']
exclude    = ['**/flycheck_*.py']

[tool.sphinx.autosummary]
generate = true

[tool.sphinx.autodoc]
add_module_names   = false
inherit_docstrings = true

[tool.sphinx.autodoc.defaults]
members           = true
undoc-members     = true
private-members   = false
special-members   = false
inherited-members = true
show-inheritance  = true

[tool.sphinx.html]
theme       = 'alabaster'
static      = ['_static']

[tool.sphinx.html.options]

##-- end sphinx

##-- bumpver
[tool.bumpver]
current_version    = "0.0.1"
version_pattern    = "MAJOR.MINOR.PATCH"
commit_message     = "[bump]: version {old_version} -> {new_version}"
tag_message        = "{new_version}"
tag_scope          = "default"
# commit             = true
# tag                = true
# pre_commit_hook  = ""
# post_commit_hook = ""
# push             = true

[tool.bumpver.file_patterns]
"pyproject.toml"   = [
                   '^version\s+=\s+"{version}"',
                   '^current_version\s+=\s+"{version}"'
]
"{{cookiecutter.proj_name}}/__init__.py" = ['^__version__\s+:=\s+"{version}"']

##-- end bumpver
